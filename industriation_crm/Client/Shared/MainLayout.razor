@inherits LayoutComponentBase
@using System.Security.Claims
@using industriation_crm.Client.Pages.Auth
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager
@inject HttpClient Http

<link rel="stylesheet" href="bootstrap 2.0.css" />
<AuthorizeView>
    <Authorized>
        <header>
            <div class="row-f ind-col-lg-10">
                <div class="header-image ind-col-lg-1-5 ind-col-md-3">
                    <a href="">
                        <img src="https://industriation.ru/Catalog/view/theme/default/img/main_logo.svg" alt="" style="width: 100%;">
                    </a>
                </div>
                <div class="ind-col-lg-8-5 ind-col-md-7 header-bar">
                    <LoginDisplay></LoginDisplay>
                </div>
            </div>
        </header>
        <div class="g-container-w">
            <div class="row-f ind-col-lg-10 fullpage-height">
                <div class="leftside-bar ind-col-lg-1-5 ind-col-md-2">
                    <NavMenu />
                </div>

                <main class="ind-col-lg-10">
                    <div class="main-block ind-col-lg-10">
                        <div class="call-modal-block">

                            @foreach (var m in megafon_Infos.OrderByDescending(meg => meg.date_time))
                            {
                                <div class="call-modal">
                                    <div class="call-date">
                                        @m.date_time
                                    </div>
                                    @if (m.type == "INCOMING")
                                    {
                                        if (m.contact == null)
                                        {
                                            <div>Звонит клиент @m.phone</div>
                                        }
                                        else
                                        {
                                            <div>Звонит клиент @m.contact.full_name</div>
                                        }
                                    }
                                    else 
                                    {
                                        if (m.contact == null)
                                        {
                                            <div>Звонил клиент @m.phone</div>
                                        }
                                        else
                                        {
                                            <div>Звонил клиент @m.contact.full_name</div>
                                        }
                                    }
                                    <div class="buttons">
                                        <button class="score" type="button" @onclick="()=>OpenClient(m)">Клиент</button>
                                        @if (m.type == "CANCELLED")
                                        {
                                            <button type="button" @onclick="()=>CallToClient(m.phone!)">Звонок</button>
                                        }
                                        <button class="close" type="button" @onclick="()=>RemoveCall(m)">Х</button>
                                        </div>
                                    </div>
                            }
                        </div>
                        @Body
                        
                    </div>
                </main>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <Login></Login>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    protected List<megafon_info> megafon_Infos { get; set; } = new List<megafon_info>();

    protected override async Task OnInitializedAsync()
    {
        HubConnection.On<megafon_info>("MegafonCall", megafon_info =>
        {
            AddNewCall(megafon_info);
            StateHasChanged();
        });
    }

    protected void OpenClient(megafon_info megafon_info)
    {
        if (megafon_info.contact != null)
        {
            NavigationManager.NavigateTo($"/client/edit/{megafon_info.contact.client_id}");
        }
        else
        {
            NavigationManager.NavigateTo($"/client/add/{megafon_info.phone}");
        }
    }
    protected async Task CallToClient(string phone)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user_id = authState.User.Claims.Where(_ => _.Type == ClaimTypes.NameIdentifier).Select(_ => Convert.ToInt32(_.Value)).First();
        await Http.GetAsync($"api/Megafon?user_id={user_id}&phone={phone}");
    }
    protected void RemoveCall(megafon_info megafon_info)
    {
        megafon_Infos.Remove(megafon_info);
    }
    protected void AddNewCall(megafon_info megafon_info)
    {
        var existing_phone = megafon_Infos.Where(m => m.callid == megafon_info.callid).FirstOrDefault();
        if (existing_phone == null)
        {
            if (megafon_Infos.Count() == 5)
            {
                var first_call = megafon_Infos.OrderBy(meg => meg.date_time).FirstOrDefault();
                megafon_Infos.Remove(first_call);
            }
            megafon_Infos.Add(megafon_info);
        }
        else
        {
            existing_phone.type = megafon_info.type;
        }
    }

}
