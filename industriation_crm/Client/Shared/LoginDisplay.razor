@inject AuthenticationStateProvider _authStateProvider
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorageService
@inject HttpClient Http

<AuthorizeView>
    <Authorized>
        
        <button @onclick="()=>viewNotifications=true" class="oi oi-bell"></button>
        @if (viewNotifications)
        {
            <industriation_crm.Client.Pages.UserNotifications.UserNotifications CloseModal="CloseModal"></industriation_crm.Client.Pages.UserNotifications.UserNotifications>
        }
        <a href="" class="auth-link">@context.User.Identity?.Name</a>
        <button type="button" @onclick="Logout" class="nav-link btn btn-link">Выйти</button>
    </Authorized>
    <NotAuthorized>
        <a href="/login" class="auth-link">Войти</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    protected bool viewNotifications = false;
    protected void CloseModal()
    {
        viewNotifications = false;
    }
    protected override async Task OnInitializedAsync()
    {
        //HubConnection.On<string>("UpdateStatus", async status =>
        //{
        //    if (orderId != 0)
        //    {
        //        order = await Http.GetFromJsonAsync<order>("api/Order/" + orderId);
        //    }
        //    StateHasChanged();
        //});
    }
    private async Task Logout()
    {
        var response = await Http.GetAsync("api/Auth");
        if (response.IsSuccessStatusCode == true)
        {
            (_authStateProvider as CustomAuthStateProvider).ClearAuthInfo();
            await _localStorageService.RemoveItemAsync("isauthenticated");
            _navigationManager.NavigateTo("/", true);
        }

    }
}