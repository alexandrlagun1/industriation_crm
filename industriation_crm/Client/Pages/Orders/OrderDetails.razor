@page "/fetchorderdetails"
@using Newtonsoft.Json
@using System.Security.Claims
@using industriation_crm.Shared.Models
@using industriation_crm.Shared.FilterModels
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="bootstrap 2.0.css" />

<div class="main-title">Заказы</div>
<hr />
@if (load)
{
    <div class="loading-block-ind">
        <img src="https://industriation.ru/Catalog/view/theme/default/img/main_logo.svg" alt="" style="width: 350px;" class="blink">
        <div style="margin-top: 10px; font-size: 18px; color: #333; font-weight: 600; width: 350px; text-align: center;">
            <hr />
            Подождите пожалуйста
        </div>
    </div>
}
else
{
    @if (view_client_select)
    {
        <industriation_crm.Client.Pages.Clients.ClientDetails SelectOrderClient="CreateOrder" CallType="1"></industriation_crm.Client.Pages.Clients.ClientDetails>
    }
    <div class="main-section mb-20">
        <div class="section-field">
            <a class="score add-order" type="button" @onclick="()=>view_client_select=true">
                Новый заказ
            </a>
        </div>
        <div class="main-section-label">
            Фильтр:
        </div>
        <row-f>
            Менеджер:
            <div class="custom-select mr-20" onmouseover="customScroll()">

                <input type="text" class="custom-input" contenteditable="true" @bind="manager_search" @bind:event="oninput" @onkeydown="FindOnKeyDown">
                </input>
                @foreach (var m in noSelectManagers.Where(m => m.name.Contains(manager_search)))
                {
                    <button @onclick="()=>{noSelectManagers.Remove(m); SelectManagers.Add(m);}">
                        <div class="name">@m.name</div>
                    </button>
                }
            </div>
            <div class="manager-field">
                @foreach (var m in SelectManagers)
                {
                    <button @onclick="()=>{SelectManagers.Remove(m); noSelectManagers.Add(m);}">
                        <div class="name">@m.name</div>
                        <img src="./icons/delete-icon.svg" />
                    </button>
                }
            </div>
        </row-f>
        <row-f>
            Статус заказа:
            <div class="custom-select mr-20" onmouseover="customScroll()">
                <input type="text" class="custom-input" contenteditable="true" @bind="order_status_search" @bind:event="oninput" @onkeydown="FindOnKeyDown">
                </input>
                @foreach (var s in noSelectOrderStatuses.Where(s => s.name.Contains(order_status_search)))
                {
                    <button @onclick="()=>{noSelectOrderStatuses.Remove(s); SelectOrderStatuses.Add(s);}">
                        <div class="name">@s.name</div>
                    </button>
                }
            </div>
            <div class="manager-field">
                @foreach (var s in SelectOrderStatuses)
                {
                    <button @onclick="()=>{SelectOrderStatuses.Remove(s); noSelectOrderStatuses.Add(s);}">
                        <div class="name">@s.name</div>
                        <img src="./icons/delete-icon.svg" />
                    </button>
                }
            </div>
        </row-f>
        <row-f>
            Статус оплаты:
            <div class="custom-select mr-20" onmouseover="customScroll()">
                <input type="text" class="custom-input" contenteditable="true" @bind="pay_status_search" @bind:event="oninput" @onkeydown="FindOnKeyDown">
                </input>
                @foreach (var s in noSelectPayStatuses.Where(s => s.name.Contains(pay_status_search)))
                {
                    <button @onclick="()=>{noSelectPayStatuses.Remove(s); SelectPayStatuses.Add(s);}">
                        <div class="name">@s.name</div>
                    </button>
                }
            </div>
            <div class="manager-field">
                @foreach (var s in SelectPayStatuses)
                {
                    <button @onclick="()=>{SelectPayStatuses.Remove(s); noSelectPayStatuses.Add(s);}">
                        <div class="name">@s.name</div>
                        <img src="./icons/delete-icon.svg" />
                    </button>
                }
            </div>
        </row-f>
        <div class="section-field ind-col-lg-10">
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Номер заказа:
                </div>
                <input type="number" @bind="ordersFilter.order_id" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Покупатель:
                </div>
                <input type="text" @bind="ordersFilter.client" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
        </div>
        <div class="section-field ind-col-lg-10">
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Дата заказа от:
                </div>
                <input type="date" @bind="ordersFilter.order_date_from" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Дата заказа до:
                </div>
                <input type="date" @bind="ordersFilter.order_date_to" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
        </div>
        <div class="section-field ind-col-lg-10">
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Дата отгрузки от:
                </div>
                <input type="date" @bind="ordersFilter.delivey_from" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Дата отгрузки до:
                </div>
                <input type="date" @bind="ordersFilter.delivey_to" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
        </div>
        <div class="section-field ind-col-lg-10">
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Дата оплаты:
                </div>
                <input type="date" @bind="ordersFilter.pay_from" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Артикул товара в заказе:
                </div>
                <input @bind="ordersFilter.product_article" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
        </div>
        <div class="section-field ind-col-lg-10">
            <div class="ind-col-lg-5 input-field ind-col-md-10">
                <div class="input-label ind-col-lg-5">
                    Email клиента:
                </div>
                <input @bind="ordersFilter.client_email" class="main-input ind-col-lg-5" @bind:event="oninput" @onkeydown="FindOnKeyDown"></input>
            </div>
        </div>
        <button @onclick="FindByFilter" class="score mb-20 mt-20">Поиск</button>
        <button @onclick="ClearFilter" class="close">X</button>
        <div class="section-fied flex mb-20 orderds-checkboxes">
                <div class="custom-box">
                <label class="td-order-new label-for-custom-checkbox" for="Новый"></label>
                    <input class="custom-checkbox" id="Новый" type="checkbox">
                    <div class="name"> - Новый</div>
                </div>
                <div class="custom-box">
                <label class="td-v-schet label-for-custom-checkbox" for="Выставлен счет"></label>
                    <input class="custom-checkbox" id="Выставлен счет" type="checkbox">
                    <div class="name"> - Выставлен счет</div>
                </div>
                <div class="custom-box">
                <label class="td-trade-confirm label-for-custom-checkbox" for="Сделка состоялась"></label>
                    <input class="custom-checkbox" id="Сделка состоялась" type="checkbox">
                    <div class="name"> - Сделка состоялась</div>
                </div>
                <div class="custom-box">
                    <label class="td-peres label-for-custom-checkbox" for="Пересогласование"></label>
                    <input class="custom-checkbox" id="Пересогласование" type="checkbox">
                    <div class="name"> - Пересогласование</div>
                </div>
                <div class="custom-box">
                    <label class="td-part-order label-for-custom-checkbox" for="Частично заказан"></label>
                    <input class="custom-checkbox" id="Частично заказан" type="checkbox">
                    <div class="name"> - Частично заказан</div>
                </div>
                <div class="custom-box">
                <label class="td-order label-for-custom-checkbox" for="Заказан"></label>
                    <input class="custom-checkbox" id="Заказан" type="checkbox">
                    <div class="name"> - Заказан</div>
                </div>
                <div class="custom-box">
                <label class="td-cancel label-for-custom-checkbox" for="Отменен"></label>
                    <input class="custom-checkbox" id="Отменен" type="checkbox">
                    <div class="name"> - Отменен</div>
                </div>
                <div class="custom-box">
                <label class="td-return label-for-custom-checkbox" for="Возврат"></label>
                    <input class="custom-checkbox" id="Возврат" type="checkbox">
                    <div class="name"> - Возврат</div>
                </div>
                <div class="custom-box">
                <label class="td-on-sklad label-for-custom-checkbox" for="На складе"></label>
                    <input class="custom-checkbox" id="На складе" type="checkbox">
                    <div class="name"> - На складе</div>
                </div>
                <div class="custom-box">
                <label class="td-to-dost label-for-custom-checkbox" for="Передан в доставку"></label>
                    <input class="custom-checkbox" id="Передан в доставку" type="checkbox">
                    <div class="name"> - Передан в доставку</div>
                </div>
                <div class="custom-box">
                <label class="td-delivered label-for-custom-checkbox" for="Доставлен"></label>
                    <input class="custom-checkbox" id="Доставлен" type="checkbox">
                    <div class="name"> - Доставлен</div>
                </div>
                <div class="custom-box">
                <label class="td-close label-for-custom-checkbox" for="Закрыт"></label>
                    <input class="custom-checkbox" id="Закрыт" type="checkbox">
                    <div class="name"> - Закрыт</div>
                </div>
        </div>
        <div class="section-field">
            <table id="orders-table" class="order-table ind-col-lg-10">
                <thead class="ind-col-lg-10">
                    <tr class="order-row ind-col-lg-10">
                        <td class="ind-col-lg-1">Номер заказа</td>
                        <td class="ind-col-lg-2">Покупатель</td>
                        @if (role == 1)
                        {
                            <td class="ind-col-lg-2">Контрагент</td>
                        }
                        else
                        {
                            <td class="ind-col-lg-2">Менеджер по снабжению</td>
                        }
                        <td class="ind-col-lg-2">Менеджер</td>
                        <td class="ind-col-lg-1">Статус оплаты</td>
                        <td class="ind-col-lg-1">Статус заказа</td>
                        <td class="ind-col-lg-1">Этап</td>
                        @*<td class="ind-col-lg-1">Действия</td>*@
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in ordersReturnData?.orders!)
                    {   
                        <tr class="order-row ind-col-lg-10" >
                            <td class="ind-col-lg-1">
                                <a href='/order/edit/@order.id'>
                                    @order.id
                                </a>
                            </td>
                            <td class="ind-col-lg-2"><a href="/contact/edit/@order.client_id/@order.main_contact?.id/false" target="_blank">@order.main_contact?.full_name</a>  </td>
                            @if (role == 1)
                            {
                                <td class="ind-col-lg-2">
                                    @if (@order.client?.client_type == 1 || @order.client?.client_type == 2)
                                    {
                                        <a href="/client/edit/@order.client?.id" target="_blank">@order.client?.org_name</a>
                                    }
                                    @if (@order.client?.client_type == 0)
                                    {
                                        <div>---</div>
                                    }
                                </td>
                            }
                            else
                            {
                                <td class="ind-col-lg-2">
                                    @order?.supplier_manager?.name
                                </td>
                            }
                            <td class="ind-col-lg-2">@order.user?.name</td>
                            <td class="ind-col-lg-1">@order.pay_status?.name</td>
                            <td class="ind-col-lg-1 @order?.order_status_name" data-status="@order.order_status?.name">@order.order_status?.name</td>
                            <td class="ind-col-lg-1">@order.stage?.name</td>
                            @*                            <td class="ind-col-lg-1">
                    <a href='/order/edit/@order.id' class="score" role="button">
                    <div class="hidden-md">Изменить</div>
                    <div class="hidden-lg ind-col-md-10">
                    <img src="./icons/edit.svg" class="h20-w20">
                    </div>
                    </a>
                    </td>*@
                        </tr>
                    }
                </tbody>

            </table>
        </div>
        <div class="section-field filter-pagination mt-20">
            <div class="ind-col-lg-6">
                Страница:
                <input class="pagination-input" type="number" min="1" @bind="current_page" @bind:event="oninput" @onkeydown="OnKeyDown">
                из @page_count.Count()
                <button class="score" @onclick="GetOrders">Перейти</button>
            </div>
            <div class="ind-col-lg-4">
                <button class="score" @onclick="PagPrev">Предыдущая</button>
                <button class="score" @onclick="PagNext">Следующая</button>
            </div>
        </div>
    </div>
}
@code {

    protected string manager_search = "";
    protected string order_status_search = "";
    protected string pay_status_search = "";
    protected int count_on_page = 50;
    protected int current_page = 1;
    List<int> page_count = new List<int>();
    protected OrdersFilter ordersFilter = new();
    protected OrdersReturnData ordersReturnData = new();

    protected order order = new();
    bool load = true;

    protected List<user> SelectManagers = new();
    protected List<user> noSelectManagers = new();
    protected List<order_status> SelectOrderStatuses = new();
    protected List<order_status> noSelectOrderStatuses = new();
    protected List<pay_status> SelectPayStatuses = new();
    protected List<pay_status> noSelectPayStatuses = new();


    protected int role { get; set; }
    protected int user_id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        role = Convert.ToInt32(authState.User.FindFirst(ClaimTypes.Role).Value);
        user_id = authState.User.Claims.Where(_ => _.Type == ClaimTypes.NameIdentifier).Select(_ => Convert.ToInt32(_.Value)).First();
        ordersFilter = await Http.GetFromJsonAsync<OrdersFilter>($"api/Filter/GetOrdersFilter/{user_id}");

        ordersFilter.user_id = user_id;
        noSelectManagers = await Http.GetFromJsonAsync<List<user>>("api/User?type=managers");
        if (noSelectManagers != null)
        {
            List<user> removedManagers = new();
            foreach (var m in noSelectManagers)
            {
                if (ordersFilter.managers.Contains(m.id))
                {
                    removedManagers.Add(m);
                    SelectManagers.Add(m);
                }
            }
            foreach (var m in removedManagers)
                noSelectManagers.Remove(m);
        }
        noSelectOrderStatuses = await Http.GetFromJsonAsync<List<order_status>>("api/OrderStatus");
        if (noSelectOrderStatuses != null)
        {
            List<order_status> removedOrderStatuses = new();
            foreach (var s in noSelectOrderStatuses)
            {
                if (ordersFilter.order_status.Contains(s.id))
                {
                    removedOrderStatuses.Add(s);
                    SelectOrderStatuses.Add(s);
                }
            }
            foreach (var s in removedOrderStatuses)
                noSelectOrderStatuses.Remove(s);
        }
        noSelectPayStatuses = await Http.GetFromJsonAsync<List<pay_status>>("api/PayStatus");
        if (noSelectPayStatuses != null)
        {
            List<pay_status> removedPayStatuses = new();
            foreach (var s in noSelectPayStatuses)
            {
                if (ordersFilter.pay_status.Contains(s.id))
                {
                    removedPayStatuses.Add(s);
                    SelectPayStatuses.Add(s);
                }
            }
            foreach (var s in removedPayStatuses)
                noSelectPayStatuses.Remove(s);
        }
        await GetOrders();
    }
    public void EditOrder(int order_id)
    {
        NavigationManager.NavigateTo($"/order/edit/{order_id}");
    }
    protected async Task FindOnKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter" || e.Code == "NumpadEnter")
        {
            await FindByFilter();
        }
    }
    protected async Task OnKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter" || e.Code == "NumpadEnter")
        {
            await GetOrders();
        }
    }
    protected async Task PagPrev()
    {
        if (current_page > 1)
        {
            current_page--;
            await GetOrders();
        }
    }
    protected async Task PagNext()
    {
        if (current_page < page_count.Count)
        {
            current_page++;
            await GetOrders();
        }
    }
    protected async Task ClearFilter()
    {
        current_page = 1;
        foreach(var m in SelectManagers)
        {
            noSelectManagers.Add(m);
        }
        SelectManagers = new();
        foreach(var s in SelectOrderStatuses)
            noSelectOrderStatuses.Add(s);
        SelectOrderStatuses = new();
        foreach(var s in SelectPayStatuses)
            noSelectPayStatuses.Add(s);
        SelectPayStatuses = new();
        ordersFilter = new();
        ordersFilter.user_id = user_id;
        await GetOrders();
    }
    protected async Task FindByFilter()
    {
        current_page = 1;
        await GetOrders();
    }
    protected async Task GetOrders()
    {
        load = true;
        ordersFilter.current_page = current_page;
        if (page_count.Count != 0 && (current_page < 1 || current_page > page_count.Count))
            return;
        ordersFilter.order_on_page = count_on_page;
        if (role == 1)
            ordersFilter.stage = 1;
        else if (role == 6)
            ordersFilter.stage = 2;

        ordersFilter.managers = new();
        foreach (var m in SelectManagers)
        {
            ordersFilter.managers.Add(m.id);
        }
        ordersFilter.order_status = new();
        foreach (var s in SelectOrderStatuses)
        {
            ordersFilter.order_status.Add(s.id);
        }
        ordersFilter.pay_status = new();
        foreach (var s in SelectPayStatuses)
        {
            ordersFilter.pay_status.Add(s.id);
        }

        var response = await Http.PostAsJsonAsync("api/Order/GetOrders", ordersFilter);
        string responseBody = await response.Content.ReadAsStringAsync();
        ordersReturnData = JsonConvert.DeserializeObject<OrdersReturnData>(responseBody);

        int total_page = Convert.ToInt32(Math.Ceiling(ordersReturnData.count / Convert.ToDouble(count_on_page)));
        page_count = new();
        for (int i = 1; i <= total_page; i++)
            page_count.Add(i);

        await Http.PutAsJsonAsync("api/Filter/SaveOrdersFilter", ordersFilter);
        load = false;

    }

    protected bool view_client_select = false;
    protected async Task CreateOrder(client client)
    {

        var progress_client_discount = await Http.GetFromJsonAsync<progress_client_discount>("api/ClientDiscount");
        var client_Orders = await Http.GetFromJsonAsync<List<order>>($"api/Order/GetOrdersByClientId/{client.id}");
        int discount = 0;
        double? pay_orders_summ = client_Orders?.Where(o => o.pay_status_id == 2).Select(o => o._price_summ).Sum();
        if (pay_orders_summ != null)
        {
            discount = Convert.ToInt32(Math.Floor((pay_orders_summ / progress_client_discount.up_point).Value)) * progress_client_discount.discount;
            if (discount > progress_client_discount.max_discount)
                discount = progress_client_discount.max_discount;
        }
        NavigationManager.NavigateTo($"/order/add/{client.id}/{discount}");
    }

    protected void Change(string href)
    {
        NavigationManager.NavigateTo(href);
    }
}