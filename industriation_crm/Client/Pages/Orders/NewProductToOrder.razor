@using Newtonsoft.Json
@using industriation_crm.Shared.FilterModels
@using industriation_crm.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (showAlert)
{
    <Alert text="Товар добавлен" CloseAlert="CloseAlert" type="0"></Alert>
}

<div class="modal" tabindex="-1" style="display:block" role="dialog">
    <div class="modal-dialog modal-xl modal-dialog-scrollable ind-col-lg-7 ind-col-md-8">
        <div class="modal-content b-s">
            <div class="modal-header">

                <div class="container">
                    <div class="row-f ind-col-lg-10">
                        <div class="main-title ind-col-lg-9">Добавление товаров</div>
                        <div class="ind-col-lg-1 row-f">

                            <div class="ind-col-lg-1 a-i-c">
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть" @onclick="CloseModal"></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div class="main-section mb-20">
                    <div>
                        <a href="/product/add" target="_blank">Новый товар</a>
                    </div>
                    <div class="main-section-label">
                        Фильтр
                    </div>
                    <div class="row-f mt-10">
                        @if (currentCategory != null && currentCategory.id != 0)
                        {
                            List<category> categoryTree = GetCategoryTree(new List<category>(), currentCategory);
                            categoryTree.Reverse();
                            foreach (var category in categoryTree)
                            {
                                <button type="button" class="filter-button selected" @onclick="()=>GetProducts(category)">@category.name <img class="arrow" src="./icons/arrow-right.svg" /></button>
                            }
                            @foreach (var category in categoriesList.Where(c => c.parent_id == currentCategory.id))
                            {
                                <button class="filter-button" @onclick="()=>GetProducts(category)">@category.name</button>
                            }
                        }
                    </div>
                    <hr />
                    <div class="section-field mb-20">
                        <div class="ind-col-lg-2-5 pad-0-10-0-0">
                            <div class="input-label">
                                Наименование товара:
                            </div>
                            <input type="text" class="main-input" @bind="productFilter.name" />
                        </div>
                        <div class="ind-col-lg-2-5 pad-0-10-0-0">
                            <div class="input-label">
                                Артикул:
                            </div>
                            <input class="main-input" @bind="productFilter.article" />
                        </div>
                        <div class="ind-col-lg-2-5 pad-0-10-0-0">
                            <div class="input-label">
                                Цена от:
                            </div>
                            <input type="number" class="main-input" @bind="productFilter.price_from" />
                        </div>
                        <div class="ind-col-lg-2-5 pad-0-10-0-0">
                            <div class="input-label">
                                Цена до:
                            </div>
                            <input type="number" class="main-input" @bind="productFilter.price_to" />
                        </div>
                    </div>
                    <div class="section-field pad-0-5">
                        <button class="score mr-20" @onclick="FindByFilter">Поиск</button>
                        <button class="close" @onclick="CleanFilter">Очистить фильтр</button>
                    </div>
                </div>

                <div class="section-field">
                    <table class="order-table ind-col-lg-10">
                        <thead class="ind-col-lg-10">
                            <tr class="order-row ind-col-lg-10">
                                <td class="ind-col-lg-1">Артикул</td>
                                <td class="ind-col-lg-4">Наименование</td>
                                <td class="ind-col-lg-2">Производитель</td>
                                <td class="ind-col-lg-1">Цена</td>
                                <td class="ind-col-lg-1">Колличество</td>
                                <td class="ind-col-lg-1"></td>
                            </tr>
                        </thead>
                        <tbody class="ind-col-lg-10">
                            @foreach (var p in productPackages)
                            {
                                
                                <tr class="order-row">
                                    <td class="ind-col-lg-1">@p.product.article</td>
                                    <td class="ind-col-lg-4">@p.product.name</td>
                                    <td class="ind-col-lg-2">@p.product.manufacturer</td>
                                    <td class="ind-col-lg-1">@p.product.price</td>
                                    <td class="ind-col-lg-1"><input class="main-input" type="number" @bind-value="p.count"></input></td>
                                    <td class="ind-col-lg-1">
                                        <button class="add-item" @onclick="()=>AddProduct(p)">
                                            <div class="hidden-md">Добавить</div>
                                            <div class="hidden-lg ind-col-md-10">
                                                <img src="./icons/add-white.svg" class="h20-w20">
                                            </div>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
                <br />
                <div class="section-field">
                    <button class="form-control" @onclick="ViewProducts">Загрузить еще</button>
                </div>
            </div>
        </div>
    </div>

</div>

@code {
    protected bool showAlert { get; set; }
    protected void CloseAlert()
    {
        showAlert = false;
        StateHasChanged();
    }

    [Parameter]
    public int orderId { get; set; }
    [Parameter]
    public Action CloseModal { get; set; }
    [Parameter]
    public Action<product_to_order> AddProductToproductToOrder { get; set; }

    protected ProductFilter productFilter = new();

    protected category currentCategory = new();
    protected List<category> categoriesList = new();
    protected List<product> productList = new();
    protected bool OpenModal = false;
    protected List<ProductPackage> productPackages = new();
    protected string searchByName { get; set; } = string.Empty;

    int productsCountOnPage = 20;

    protected async Task ViewProducts()
    {
        productsCountOnPage = productsCountOnPage + 20;
        await FindByFilter();

    }
    private void InvokeCloseModal()
    {
        CloseModal?.Invoke();
    }


    protected override async Task OnInitializedAsync()
    {
        categoriesList = await Http.GetFromJsonAsync<List<category>>("api/Category");
        currentCategory = categoriesList.Where(c => c.parent_id == 0).FirstOrDefault();
        await FindByFilter();

    }
    protected async Task GetProducts(category category)
    {
        currentCategory = category;
        productFilter.child_categories = new();
        GetChildCategories(currentCategory.id);
        await FindByFilter();
    }
    protected void CategoryBack()
    {
        if (currentCategory.parent_id != 0)
            currentCategory = categoriesList.Where(c => c.id == currentCategory.parent_id).FirstOrDefault();
    }
    protected async Task FindByFilter()
    {
        productFilter.current_page = 1;
        productFilter.product_on_page = productsCountOnPage;
        productFilter.category_id = currentCategory.id;

        var json = JsonConvert.SerializeObject(productFilter);
        var stringContent = new StringContent(json);
        var response = await Http.PostAsJsonAsync("api/Product/FindByFilter", productFilter);
        var responseBody = await response.Content.ReadAsStringAsync();
        ProductReturnData productReturnData = JsonConvert.DeserializeObject<ProductReturnData>(responseBody);
        productList = productReturnData.products;
        CompleteProductPackage(productList);
        StateHasChanged();
    }
    protected async Task AddProduct(ProductPackage productPackage)
    {
        product_to_order product_To_Order = new product_to_order();
        product_To_Order.tr_class = "product_new";
        product_To_Order.product_id = productPackage.product.id;
        //product_To_Order.order_id = orderId;
        product_To_Order.count = productPackage.count;
        product_To_Order._product_price = productPackage.product.price;
        product_To_Order.product = productPackage.product;
        AddProductToproductToOrder?.Invoke(product_To_Order);
        showAlert = true;
    }
    protected List<category> GetCategoryTree(List<category> categoryTree, category category)
    {
        categoryTree.Add(category);
        if (category.parent_id != 0)
            GetCategoryTree(categoryTree, categoriesList.Where(c => c.id == category.parent_id).FirstOrDefault());
        return categoryTree;
    }
    protected async Task CleanFilter()
    {
        productFilter = new();
        currentCategory = categoriesList.Where(c => c.id == 1).FirstOrDefault();
        await FindByFilter();
    }

    protected void CompleteProductPackage(List<product> _productList)
    {
        productPackages = new();
        foreach (var p in _productList)
        {
            ProductPackage productPackage = new ProductPackage();
            productPackage.product = p;
            productPackages.Add(productPackage);
        }
    }
    protected void GetChildCategories(int category_id)
    {
        productFilter.child_categories.Add(category_id);
        List<category> childs = categoriesList?.Where(c => c.parent_id == category_id).ToList();
        if (childs == null || childs.Count == 0)
            return;
        foreach (var c in childs)
        {
            GetChildCategories(c.id);
        }
    }
    protected class ProductPackage
    {
        public int count = 1;
        public product product { get; set; }
    }

}
