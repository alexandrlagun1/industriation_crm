@page "/order/add"
@page "/order/edit/{orderId:int}"
@page "/order/add/{clientId:int}"
@using System.Globalization
@using System.Security.Claims
@using industriation_crm.Server.DataTranslation
@using industriation_crm.Shared.Models
@using industriation_crm.Client.PrintForms
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject HubConnection HubConnection
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="bootstrap 2.0.css" />


@if (showAlert)
{
    <Alert text="Успешно сохранено!" CloseAlert="CloseAlert" type="0"></Alert>
}
@if (OpenProductAddModel)
{
    <NewProductToOrder orderId="orderId" CloseModal="CloseAddProductModal" AddProductToproductToOrder="AddProductToProductToOrder"></NewProductToOrder>
}
@if (role == 1)
{
    <div class="buttons-bar mb-10">
        <button @onclick="()=>ViewOrderManagement = false" class="score">Информация о заказе</button>
        <button @onclick="()=>ViewOrderManagement = true" class="score">Управление заказом</button>
        @if (order?.order_Pays?.Count() == 0)
        {
            <button @onclick="OrderCancellation" class="close">Отменить заказ</button>
        }
        @if (order?.stage_id > 1@* || user_id != order?.user_id*@)
        {
            <button @onclick="OrderPayReturn" class="close close-btn-disabled">Оформить возврат</button>
            <style type="text/css">
                .main-section input,
                .main-section textarea,
                .main-section select {
                    user-select: none;
                    opacity: .7;
                    pointer-events: none;
                    background-color: #eee;
                }

                .main-section button,
                .add-payment {
                    opacity: .7;
                    pointer-events: none;
                    user-select: none;
                }
            </style>
        }
        else
        {
            <button @onclick="OrderPayReturn" class="close">Оформить возврат</button>
        }

    </div>
}


<EditForm Model="@order" OnValidSubmit="SaveOrder">
    <DataAnnotationsValidator />

    @if (ViewOrderManagement || role != 1)
    {
        <industriation_crm.Client.Pages.order_management.OrderManagementInfo order="order!"></industriation_crm.Client.Pages.order_management.OrderManagementInfo>
    }
    else
    {
        <div class="main-title">@Title</div>
        <div class="main-section  flex">
            <div class="main-section-label">Печать документов</div>
            <div class="section-field ind-col-lg-5">
                <select class="main-input ind-col-lg-5 ind-col-md-3 mr-5">
                    <option>
                        Альфабанк
                    </option>
                    <option>
                        Сбербанк
                    </option>
                    <option>
                        ВТБ
                    </option>
                </select>
                <button class="score mr-5" @onclick='()=>GetOrderPrintForm("1")' type="button">Счет</button>
                <button class="score" @onclick='()=>GetOrderPrintForm("0")' type="button">Счет без печати</button>
            </div>
            @*            Второй блок для договоров (БЕЗ ФУНКЦИОНАЛА)*@
            <div class="section-field ind-col-lg-5">
                <select class="main-input ind-col-lg-5 ind-col-md-3 mr-5">
                    <option>
                        Альфабанк
                    </option>
                    <option>
                        Сбербанк
                    </option>
                    <option>
                        ВТБ
                    </option>
                </select>
                <button class="score mr-5" type="button">Договор</button>
                <button class="score" type="button">Договор без печати</button>
            </div>
        </div>

        <hr class="custom-hr" />
        <div class="main-section">
            <div class="main-section-label">Менеджер</div>
            <div class="section-field">
                <InputSelect class="main-input ind-col-lg-3" @bind-Value="order.user_id">
                    @foreach (var m in managers)
                    {
                        <option value="@m.id">@m.name</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="main-section">
            <div class="main-section-label">Контрагент</div>
            <div class="contragent ind-col-lg-10">
                <a href="/client/edit/@client.id" target="_blank" class="contragent">
                    @if (client?.client_type == 1)
                        @client?.org_name
                    else
                        @client?.contacts?.Where(c=>c.main_contact == 1).FirstOrDefault()?.full_name


                    </a>
                    <div class="btn-group p-r" role="group" aria-label="Basic radio toggle button group">
                        <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked @onchange='@(() => { viewContacts = false; contactClass="contact"; clientClass="client client--active";})'>
                        <label class="@clientClass" for="btnradio1">Клиент</label>

                        <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" @onchange='@(() => { viewContacts = true; contactClass="contact contact--active"; clientClass="client";})'>
                        <label class="@contactClass" for="btnradio2">Контактные лица</label>
                    </div>
                </div>
                @if (viewContacts == false)
            {
                <div class="section-field">
                    <div class="ind-col-lg-5 ind-col-md-10">
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Имя</div>
                            <input type="text" class="main-input" value="@order?.main_contact?.name" @oninput="@((ChangeEventArgs e) => {order.main_contact.name = e.Value.ToString();clientChange = true;})">
                        </div>
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Фамилия</div>
                            <input type="text" class="main-input" value="@order?.main_contact?.surname" @oninput="@((ChangeEventArgs e) => {order.main_contact.surname = e.Value.ToString();clientChange = true;})">
                        </div>
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Отчество</div>
                            <input type="text" class="main-input" value="@order?.main_contact?.patronymic" @oninput="@((ChangeEventArgs e) => {order.main_contact.patronymic = e.Value.ToString();clientChange = true;})">
                        </div>
                    </div>
                    <div class="ind-col-lg-5 ind-col-md-10">
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">E-mail</div>
                            <input type="email" class="main-input" value="@order?.main_contact?.email" @oninput="@((ChangeEventArgs e) => {order.main_contact.email = e.Value.ToString();clientChange = true;})">
                        </div>
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Номер телефона</div>
                            <input type="tel" class="main-input" value="@order?.main_contact?.phone" @oninput="@((ChangeEventArgs e) => {order.main_contact.phone = e.Value.ToString();clientChange = true;})">
                        </div>
                    </div>
                </div>
                @if (order?.main_contact?.contact_phones != null)
                {
                    @foreach (var p in order?.main_contact?.contact_phones)
                    {
                        <div class="section-field">
                            <div class="ind-col-lg-5 input-field">
                                <div class="input-label">Доп. телефон</div>
                                <input type="tel" class="main-input" value="@p.phone" @oninput="@((ChangeEventArgs e) => {p.phone = e.Value.ToString();clientChange = true;})">
                            </div>
                        </div>
                    }
                }
            }
            else
            {
                <br />
                <div class="section-field ind-col-lg-10">
                    <table class="order-table ind-col-lg-10">
                        <thead class="table-success ind-col-lg-10">
                            <tr class="order-row ind-col-lg-10">
                                <td class="ind-col-lg-1">ID</td>
                                <td class="ind-col-lg-3">Имя</td>
                                <td class="ind-col-lg-6">Основной контакт</td>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var _contact in client.contacts)
                            {
                                <tr class="order-row ind-col-lg-10">
                                    <td class="ind-col-lg-1">@_contact.id</td>
                                    <td class="ind-col-lg-3">@_contact.name</td>
                                    <td class="ind-col-lg-6">
                                        <input class="form-check-input" type="radio" @onchange="()=>ChangeMainContact(_contact)" name="maincontact" checked="@GetIsMain(_contact.id)">
                                    </td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
            }
        </div>
        @if (client?.client_type == 1)
        {
            <div class="main-section">
                <div class="main-section-label">Данные юридического лица</div>
                <div class="section-field">
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">Полное наименование</div>
                        <input type="text" class="main-input" @bind="client.org_name">
                    </div>
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">ИНН</div>
                        <input type="number" class="main-input" @bind="client.org_inn">
                    </div>
                </div>
                <div class="section-field">
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">Адрес регистрации</div>
                        <input type="text" class="main-input" @bind="client.org_address">
                    </div>
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">ОГРН</div>
                        <input type="number" class="main-input" @bind="client.org_ogrn">
                    </div>
                </div><div class="section-field">
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">КПП</div>
                        <input type="number" class="main-input" @bind="client.org_kpp">
                    </div>
                </div>
            </div>

            <div class="main-section">
                <div class="main-section-label">Банковские реквизиты</div>
                <div class="section-field">
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">БИК</div>
                        <input type="number" class="main-input" @bind="client.bank_bik">
                    </div>
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">Корреспондентский счет</div>
                        <input type="number" class="main-input" @bind="client.bank_cor_schet">
                    </div>
                </div>
                <div class="section-field">
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">Наименование банка</div>
                        <input type="text" class="main-input" @bind="client.bank_name">
                    </div>
                    <div class="ind-col-lg-5 ind-col-md-10 input-field">
                        <div class="input-label">Расчетный счет</div>
                        <input type="number" class="main-input" @bind="client.bank_ras_schet">
                    </div>
                </div>
            </div>
        }
        <div class="main-section">
            <div class="main-section-label">Состав заказа</div>
            <div class="section-field">
                <table class="order-table ind-col-lg-10">
                    <thead class="table-success ind-col-lg-10">
                        <tr class="order-row ind-col-lg-10">
                            <td class="ind-col-lg-1">Артикул продукта</td>
                            <td class="ind-col-lg-3">Наименование</td>
                            <td class="ind-col-lg-2">Срок доставки</td>
                            <td class="ind-col-lg-1">Цена</td>
                            <td class="ind-col-lg-1">Количество</td>
                            <td class="ind-col-lg-1">Скидка</td>
                            <td class="ind-col-lg-1">Стоимость</td>
                        </tr>
                    </thead>
                    <tbody class="ind-col-lg-10">
                        @if (order != null && order.product_To_Orders != null)
                        {
                            @foreach (var p in order!.product_To_Orders.OrderBy(p => p.product_postition))
                            {
                                <tr class="order-row">
                                    <td class="ind-col-lg-1" id="model">
                                        <img src="./icons/drag.png" alt="" class="drag" draggable="true" ondragover="event.preventDefault();" @ondrop="()=>OnDrop(p)" @ondragstart="()=>OnDragStart(p)">
                                        @p?.product?.article
                                    </td>
                                    <td class="ind-col-lg-3">
                                        <a href="/product/edit/@p.product.id" class="table-link">
                                            @p?.product?.name

                                            <div class="table-link-modal">
                                                <div class="ind-col-lg-2">
                                                    <img src='@("https://industriation.ru/image/"+p.product.image)' alt="" class="table-modal-img">
                                                </div>
                                                <div class="ind-col-lg-8">
                                                    <div class="table-modal-title">
                                                        @p?.product?.name
                                                    </div>
                                                    <div class="table-modal-price">
                                                        @p._product_price
                                                    </div>
                                                </div>
                                            </div>
                                        </a>
                                    </td>
                                    <td class="ind-col-lg-2">
                                        <div class="ind-col-lg-3">
                                            <input type="number" class="table-input" @bind="p.delivery_period">
                                        </div>
                                        <div class="ind-col-lg-7">
                                            <select name="" id="" class="table-input" @bind="p.delivery_period_type_id">
                                                @foreach (var delivery_period_type in delivery_Period_Types!)
                                                {
                                                    <option value="@delivery_period_type.id">@delivery_period_type.name</option>
                                                }
                                            </select>
                                        </div>
                                    </td>
                                    <td class="ind-col-lg-1">
                                        <button type="button" class="price-button" step="0.1" @onclick="()=>p.showPriceModal=true">
                                            @if (p.ruble_discount == 0 && p.percent_discount == 0)
                                            {
                                                <span>@p._product_price ₽</span>
                                            }
                                            else
                                            {
                                                <div class="prev-price">
                                                    @p._product_price ₽
                                                </div>
                                                <div class="price-with-discount">
                                                    @p._product_price_with_discount ₽
                                                </div>
                                            }
                                        </button>
                                        @if (p.showPriceModal)
                                        {
                                            <div class="price-modal" tabindex="0">
                                                <div class="input-label mb-10">Цена</div>
                                                <div class="row-f ind-col-lg-10">
                                                    <input type="number" class="main-input price-input" step="0.1" @bind="@p._product_price" />
                                                </div>
                                                <div class="input-label mt-10">Дополнительная скидка</div>
                                                <div class="row-f">
                                                    <div class="ind-col-lg-5 discount-input">
                                                        <input type="number" class="main-input" step="0.1" @bind="@p.ruble_discount" />₽
                                                    </div>
                                                    <div class="ind-col-lg-5 discount-input">
                                                        <input type="number" class="main-input" @bind="@p.percent_discount" />%

                                                    </div>
                                                </div>
                                                <div class="discount-buttons mt-10">
                                                    <button class="score" @onclick="() => p.showPriceModal = false">Закрыть</button>
                                                </div>
                                            </div>
                                        }
                                    </td>

                                    <td class="ind-col-lg-1"><input type="number" class="main-input" @bind="@p._count" /></td>
                                    <td class="ind-col-lg-1">@p?._discount_total_price</td>
                                    <td class="ind-col-lg-1">
                                        @p?._total_price
                                        <button type="button" class="delete-button" @onclick="(async () => await RemoveProductToOrder(p!))">
                                            <img src="./icons/delete-icon.svg" class="delete-button">
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="section-field a-i-c mt-20">
                <div class="section-field ind-col-lg-10">
                    @if (order.product_To_Orders == null || order.product_To_Orders.Count == 0)
                    {
                        <p align="center" class="ind-col-lg-10">Товары в заказе отсутствуют</p>
                    }
                    else
                    {
                        <div class="ind-col-lg-7 ind-col-md-4"></div>
                        <div class="ind-col-lg-1 ind-col-md-2 ta-right">
                            <label>Разовая скидка</label>
                        </div>
                        <div class="ind-col-lg-1 ind-col-md-2 a-i-c">
                            <input class="main-input ind-col-lg-6 mr-10 ml-a" id="ex1" type="number" @bind="@order._ruble_discount">
                            ₽
                        </div>
                        <div class="ind-col-lg-1 ind-col-md-2 a-i-c">
                            <input class="main-input ind-col-lg-6 mr-10 ml-a" id="ex2" type="number" @bind="@order._percent_discount">
                            %
                        </div>

                    }
                </div>
            </div>
            <hr class="custom-hr" />
            <button type="button" class="add-item" @onclick="()=>OpenProductAddModel=true">Добавить позицию</button>
            <div class="section-field ind-col-lg-10">
                <div class="ind-col-lg-10">
                    <div class="ind-col-lg-10 row-f">
                        <div class="ind-col-lg-7"></div>
                        <div class="ind-col-lg-3 row-f">
                            <div class="ind-col-lg-7" style="text-align: right;">
                                Стоимость товаров:
                            </div>
                            <div class="ind-col-lg-3" style="text-align: right;">
                                @order._total_price
                            </div>
                        </div>
                    </div>
                    <div class="ind-col-lg-10 row-f">
                        <div class="ind-col-lg-7"></div>
                        <div class="ind-col-lg-3 row-f">
                            <div class="ind-col-lg-7" style="text-align: right;">
                                Стоимость доставки:
                            </div>
                            <div class="ind-col-lg-3" style="text-align: right;">
                                @order.delivery._price
                            </div>
                        </div>
                    </div>
                    <div class="ind-col-lg-10 row-f">
                        <div class="ind-col-lg-7"></div>
                        <div class="ind-col-lg-3 row-f">
                            <div class="ind-col-lg-7" style="text-align: right;">
                                Итог:
                            </div>
                            <div class="ind-col-lg-3" style="text-align: right;">
                                @order.products_with_delivery_price
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row-f">
            <div class="main-section ind-col-lg-5 ind-col-md-7">
                <div class="main-section-label">Отгрузка и доставка</div>
                <div class="section-field">
                    <div class="ind-col-lg-10">
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Тип доставки</div>
                            <select type="text" class="main-input" value="@order.delivery?.delivery_type?.id" @onchange="ChangeDeliveryType">
                                @foreach (var delivery_type in delivery_Types!)
                                {
                                    <option value="@delivery_type.id">@delivery_type.name</option>
                                }
                            </select>
                        </div>
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Зафиксированная дата отгрузки на момент оплаты</div>
                            <input type="date" class="main-input" @bind="@order.delivery.shipment_date">
                        </div>
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Стоимость</div>
                            <input type="number" step="0.01" class="main-input" @bind="order.delivery._price">
                        </div>

                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">ФИО Получателя</div>
                            <input type="text" class="main-input" @bind="@order.delivery.recipient_name">
                        </div>
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Телефон Получателя</div>
                            <input type="tel" class="main-input" @bind="@order.delivery.recipient_phone">
                        </div>
                        <div class="ind-col-lg-10 input-field">
                            <div class="input-label">Адрес получателя</div>
                            <textarea type="text" class="main-input" @bind="@order.delivery.address" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="ind-col-lg-5 ind-col-md-3 background-for-comment">
                <div class="main-section ind-col-lg-10">
                    <div class="main-section-label">Комментарии к заказу</div>
                    <div class="section-field">
                        <div class="ind-col-lg-10 flex">
                            <textarea type="text" class="main-input" @bind="order.comments"></textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="main-section ind-col-lg-5 ind-col-md-10">
            <div class="main-section-label">Оплата</div>
            <div class="section-field">
                <input type="number" step="0.01" class="main-input" @bind="pay"></input>
                <buton type="button" class="add-payment" @onclick="AddNewOrderPay">Добавить оплату</buton>
            </div>
            <div class="input-field">
                <div class="input-label">Условия оплаты</div>
                <select type="text" class="main-input" @bind="@order.pay_conditions">
                    <option value="1">Предоплата</option>
                    <option value="2">Постоплата</option>
                </select>
            </div>
            @if (order.pay_conditions == 1)
            {
                <div class="input-field">
                    <div class="input-label">Предоплата:</div>
                    <input class="main-input" @bind="@order.pay_predoplata_percent"></input>%
                </div>
            }
            <div class="input-field">
                <div class="input-label">К оплате:</div>
                <label>@order._price_summ</label>
            </div>
            <hr class="custom-hr" />


            @foreach (var p in order?.order_Pays!.Where(o => o.isRemove == false))
            {
                <div class="payment-field ind-col-lg-10">
                    <div class="input-field">
                        <div class="input-label">
                            Дата оплаты
                        </div>
                        <label>@p.date</label>
                    </div>
                    <div class="input-field">
                        <div class="input-label">
                            Сумма
                        </div>
                        <label>@p.price</label>
                    </div>
                    <button type="button" class="remove-payment" @onclick="()=>RemoveOrderPay(p)">Удалить оплату</button>
                </div>
            }
        </div>
    }
    <div class="bottom-buttons ind-col-lg-10">
        <button type="submit" class="save">Сохранить</button>
        <button class="close" @onclick="Cancel">Закрыть</button>
        @if (order?.stage_id == 1 && (order?.order_status_id == 3 || order?.order_status_id == 4) && role == 1)
        {
            <button class="score" type="button" @onclick="Bill">Передать в снабжение</button>

        }
        @if (role == 6 && (order.supplier_manager_id == null || order.supplier_manager_id == user_id))
        {
            if (order.order_status_id == 3 || order.order_status_id == 5)
            {
                <button class="score" type="button" @onclick="CreateSupplierOrder">Сформировать заказ поставщику</button>
                <button class="close" type="button" @onclick="ReturnOrderToManager">На пересогласование</button>
            }
        }
        @if (role == 1 && order?.stage_id == 2 && order?.order_status_id == 6)
        {
            <button class="score" type="button" @onclick="ChangeStatus_OnStock">На складе</button>
        }
        @if (role == 1 && order?.stage_id == 3 && order?.order_status_id == 9)
        {
            <button class="score" type="button" @onclick="ChangeStatus_OnDelivery">Передан в доставку</button>
        }
        @if (role == 1 && order?.stage_id == 3 && order?.order_status_id == 10)
        {
            <button class="score" type="button" @onclick="ChangeStatus_Delivered">Доставлен</button>
        }
        @if (role == 1 && order?.stage_id == 3 && order?.order_status_id == 11)
        {
            <button class="score" type="button" @onclick="ChangeStatus_Closed">Закрыт</button>
        }
    </div>
</EditForm>


@code {
    protected double? pay{ get; set; }

    protected bool showAlert { get; set; }
    protected void CloseAlert()
    {
        showAlert = false;
        StateHasChanged();
    }

    protected bool ViewOrderManagement = false;
    protected string clientClass = "client client--active";
    protected string contactClass = "contact";
    protected bool showPriceModal = false;
    [Parameter]
    public int clientId { get; set; }

    [Parameter]
    public int orderId { get; set; }
    protected string Title = "Новый заказ";

    protected order? order = new();
    protected List<user>? managers = new();
    protected List<product_to_order>? RemoveProductToOrdersList = new();
    protected client? client = new();
    protected List<delivery_type>? delivery_Types = new();
    protected List<delivery_period_type>? delivery_Period_Types = new();

    protected bool OpenProductAddModel = false;
    protected bool clientChange = false;
    protected bool viewContacts = false;
    protected int role { get; set; }
    protected int? user_id { get; set; }

    protected product_to_order drag_product_to_order { get; set; }

    //Методы инициализвции
    protected override async Task OnInitializedAsync()
    {
        HubConnection.On<order_pay>("AddNewPay", order_pay =>
        {
            if (orderId == order_pay.order_id)
            {
                SendUserNotification($"По заказу {order?.id} прошла оплата", order.user_id);
                order.order_Pays.Add(order_pay);
            }
            StateHasChanged();
        });


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        role = Convert.ToInt32(authState.User.FindFirst(System.Security.Claims.ClaimTypes.Role).Value);
        user_id = authState.User.Claims.Where(_ => _.Type == ClaimTypes.NameIdentifier).Select(_ => Convert.ToInt32(_.Value)).First();

        await GetClientsManagers();
    }
    protected override async Task OnParametersSetAsync()
    {

        if (orderId != 0)
        {
            Title = $"Изменить заказ {orderId}";
            order = await Http.GetFromJsonAsync<order>("api/Order/" + orderId);
            client = order.client;
        }
        else
        {
            await SetMainContact();
        }
        if (String.IsNullOrEmpty(order?.delivery?.recipient_name))
        {
            order.delivery.recipient_name = order?.main_contact?.full_name;
        }
        if (String.IsNullOrEmpty(order?.delivery?.address))
        {
            order.delivery.address = order?.client?.org_address;
        }
        if (String.IsNullOrEmpty(order?.delivery?.recipient_phone))
        {
            order.delivery.recipient_phone = order?.main_contact?.phone;
        }
    }
    //Печатные формы
    protected async Task GetOrderPrintForm(string pch)
    {
        order_print_form order_Print_From = order_converter.ConvertOrderPrintForm(order, pch);

        var response = await Http.PostAsJsonAsync($"api/PrintForms", order_Print_From);
        var fileStream = await response.Content.ReadAsStreamAsync();

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $"Счет на оплату {order?.id} от {order?.order_date?.ToString("dd.MM.yyyy")}.pdf", streamRef);
    }

    //Методы Drag&Drop

    protected void OnDragStart(product_to_order _product_to_order)
    {
        drag_product_to_order = _product_to_order;
    }
    protected void OnDrop(product_to_order _product_to_order)
    {
        int? position = _product_to_order.product_postition;
        _product_to_order.product_postition = drag_product_to_order.product_postition;
        drag_product_to_order.product_postition = position;
        drag_product_to_order = null;
    }

    protected async Task ReturnOrderToManager()
    {
        order!.stage_id = 1;
        order!.order_status_id = 4;
        await CreateOrderHistory("Заказ отправлен на пересогласование с клиентом");
        await SendUserNotification($"Заказ {order.id} отправлен на пересогласование с клиентом", order.user_id);
        await SaveOrder();
    }
    protected async Task CreateSupplierOrder()
    {
        if (order?.product_To_Orders?.Where(p => p.is_add_to_supplier_order == true).FirstOrDefault() != null)
        {
            Guid guid = Guid.NewGuid();
            order_translation.orders_data.Add(guid, order);
            NavigationManager.NavigateTo($"/supplierorder/add/{guid.ToString()}");
        }
    }
    protected async Task ChangeStatus_OnStock()
    {
        if (order.order_status_id == 6)
        {
            order.order_status_id = 9;
            order.stage_id = 3;
            await SaveOrder();
        }
    }
    protected async Task ChangeStatus_OnDelivery()
    {
        if (order.order_status_id == 9)
        {
            order.order_status_id = 10;
            await SaveOrder();
        }
    }
    protected async Task ChangeStatus_Delivered()
    {
        if (order.order_status_id == 10)
        {
            order.order_status_id = 11;
            await SaveOrder();
        }
    }
    protected async Task ChangeStatus_Closed()
    {
        if (order.order_status_id == 11)
        {
            order.order_status_id = 12;
            await SaveOrder();
        }
    }
    protected async Task GetClientsManagers()
    {
        if (clientId != 0)
        {
            client = await Http.GetFromJsonAsync<client>($"api/Client/{clientId}");
            if (orderId == 0)
            {
                order!.user_id = client!.user_id;
            }
        }

        managers = await Http.GetFromJsonAsync<List<user>>("api/User?type=managers");
        if (orderId == 0 && clientId == 0)
        {
            order!.user_id = managers![0].id;
        }

        delivery_Types = await Http.GetFromJsonAsync<List<delivery_type>>("api/DeliveryType");
        delivery_Period_Types = await Http.GetFromJsonAsync<List<delivery_period_type>>("api/DeliveryPeriodType");
    }


    //Методы для определения main contact
    protected void ChangeMainContact(contact _main_contact)
    {
        order.main_contact = _main_contact;
        order.main_contact_id = _main_contact.id;
        clientChange = true;
    }
    protected bool GetIsMain(int id)
    {
        if (order.main_contact_id == id)
            return true;
        return false;
    }
    protected async Task SetMainContact()
    {
        if (clientId != 0)
        {
            order.main_contact = client.contacts.Where(c => c.main_contact == 1).FirstOrDefault();
            order.main_contact_id = order.main_contact.id;
        }
    }

    //Методы сохранения заказа
    protected async Task Bill()
    {
        order.stage_id = 2;
        if (order.id != 0)
        {
            if (order.order_status_id == 3 && order.pay_conditions == 2)
            {
                await Http.GetAsync($"api/_1C/{order.id}");
            }
            if (order.order_status_id == 4)
                order.order_status_id = 3;
            await Http.PutAsJsonAsync("api/Order", order);
            await CreateOrderHistory("Заказ переведен на стадию снабжения");
            if (order.supplier_manager_id != null)
                await SendUserNotification($"Заказ {order.id} переведен на стадию снабжения", order.supplier_manager_id);
        }
    }
    protected async Task OrderCancellation()
    {
        order.order_status_id = 7;
        await Http.PutAsJsonAsync("api/Order", order);
    }
    protected async Task OrderPayReturn()
    {
        order.order_status_id = 8;
        await Http.PutAsJsonAsync("api/Order", order);
    }
    protected async Task SaveOrder()
    {
        //удалить потом
        if (order.order_status_id == 1 && order.pay_conditions == 1)
        {
            double? order_pays_summ = order.order_Pays?.Select(p => p.price).Sum();
            double? min_predoplata = order.price_summ / 100 * order.pay_predoplata_percent;
            if (order_pays_summ + 0.1 >= min_predoplata)
                order.order_status_id = 3;
        }
        if (order.order_Pays?.Select(p => p.price).Sum() < order.price_summ)
        {
            order.pay_status_id = 1;
        }
        else
        {
            order.pay_status_id = 2;
        }
        if(order.order_Pays?.Count == 0){
            order.pay_status_id = null;
        }



        if (order.pay_conditions == 2 && order.order_status_id == 1)
            order.order_status_id = 3;
        if (order.pay_conditions == 1 && order.order_status_id == 3 && order.order_Pays.Count == 0)
            order.order_status_id = 1;
        if (order?.id != 0)
        {
            await Http.PutAsJsonAsync("api/Order", order);
        }
        else
        {
            if (order?.pay_conditions == 2)
                order.pay_status_id = 3;
            else
                order.pay_status_id = 1;

            order.client_id = clientId;
            order.order_date = DateTime.Now;
            order.stage_id = 1;

            var response = await Http.PostAsJsonAsync("api/Order", order);
            orderId = await response.Content.ReadFromJsonAsync<int>();

            await CreateOrderHistory("Заказ клиента сформирован");
        }

        //Сохранение и удаление продуктов из заказа
        if (RemoveProductToOrdersList.Count != 0)
            await Http.PostAsJsonAsync("api/ProductToOrder/remove_products_to_orders", RemoveProductToOrdersList);
        if (order.product_To_Orders != null)
        {
            List<product_to_order> AddProductsToOrderList = order.product_To_Orders?.Where(p => p.id == 0).ToList();
            if (AddProductsToOrderList.Count != 0)
            {
                foreach (var p in order.product_To_Orders)
                    p.order_id = orderId;
                await Http.PostAsJsonAsync("api/ProductToOrder/add_products_to_order", AddProductsToOrderList);
            }
            await Http.PutAsJsonAsync("api/ProductToOrder/update_products_to_order", order.product_To_Orders.Where(p => p.id != 0));
        }
        showAlert = true;

        await OnParametersSetAsync();
        StateHasChanged();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/fetchorderdetails");
    }

    protected async Task CreateOrderHistory(string text)
    {
        order_history order_history = new order_history();
        order_history.date = DateTime.Now;
        order_history.text = text;
        order_history.order_id = orderId;
        await Http.PostAsJsonAsync("api/OrderHistory", order_history);
    }

    //Методы для работы с товарами в заказе
    protected void CloseAddProductModal()
    {
        OpenProductAddModel = false;
        StateHasChanged();
    }
    protected void AddProductToProductToOrder(product_to_order product_To_Order)
    {
        if (order?.product_To_Orders == null)
            order.product_To_Orders = new List<product_to_order>();
        if (order.percent_discount != null)
            product_To_Order.order_ruble_discount = order._ruble_discount;
        if (order.ruble_discount != null)
            product_To_Order.order_percent_discount = order._percent_discount;
        product_To_Order.delivery_period_type_id = 1;
        product_To_Order.delivery_period = 1;

        order.product_To_Orders.Add(product_To_Order);
        int? last_position = order.product_To_Orders.OrderByDescending(p => p.product_postition)?.FirstOrDefault()?.product_postition;
        product_To_Order.product_postition = last_position + 1;
        StateHasChanged();
    }
    protected async Task RemoveProductToOrder(product_to_order product_to_order)
    {
        //await Http.DeleteAsync("api/ProductToOrder/" + product_to_order.id);
        if (product_to_order?.id != null && product_to_order?.id != 0)
            RemoveProductToOrdersList.Add(product_to_order);
        order?.product_To_Orders?.Remove(product_to_order);
        //Уменьшение позиций всех товаров идущих за удаляемым
        foreach (var product in order?.product_To_Orders?.Where(p => p.product_postition > product_to_order.product_postition))
        {
            product.product_postition -= 1;
        }
    }

    protected async Task SendUserNotification(string text, int? user_id)
    {
        user_notifications user_notifications = new user_notifications();
        user_notifications.text = text;
        user_notifications.date = DateTime.Now;
        user_notifications.user_id = user_id;
        await Http.PostAsJsonAsync<user_notifications>("api/usernotifications", user_notifications);
    }

    //Методы для доставки
    protected void ChangeDeliveryType(ChangeEventArgs e)
    {
        var delivery_type = delivery_Types.Where(d => d.id == Convert.ToInt32(e.Value)).FirstOrDefault();
        order.delivery.delivery_type = delivery_type;
        order.delivery._price = delivery_type.price;
        order.delivery.delivery_type_id = delivery_type.id;
    }

    protected void AddNewOrderPay()
    {
        order_pay order_Pay = new order_pay();
        order_Pay.price = pay;
        order.order_Pays.Add(order_Pay);
    }
    protected void RemoveOrderPay(order_pay order_Pay)
    {
        order_Pay.isRemove = true;
    }

}