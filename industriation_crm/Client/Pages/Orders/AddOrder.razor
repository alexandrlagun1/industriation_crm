@page "/order/add"
@page "/order/edit/{orderId:int}"
@page "/order/add/{clientId:int}"
@using System.Globalization
@using industriation_crm.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager
<link rel="stylesheet" href="bootstrap 2.0.css" />
@*1*@

@if (OpenProductAddModel)
{
    <NewProductToOrder orderId="orderId" CloseModal="CloseAddProductModal" AddProductToproductToOrder="AddProductToProductToOrder"></NewProductToOrder>
}
<EditForm Model="@order" OnValidSubmit="SaveOrder">
    <DataAnnotationsValidator />

    <div class="main-title">@Title</div>
    <hr class="custom-hr" />
    <div class="main-section">
        <div class="main-section-label">Менеджер</div>
        <div class="section-field">
            <InputSelect class="main-input ind-col-lg-3" @bind-Value="order.user_id">
                @foreach (var m in managers)
                {
                    <option value="@m.id">@m.name</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="main-section">
        <div class="main-section-label">Контрагент</div>
        <div class="contragent ind-col-lg-10">
            <a href="/client/edit/@client.id" target="_blank" class="contragent">
                @if (client?.client_type == 1)
                    @client?.org_name
                else
                    @client?.contacts?.Where(c=>c.main_contact == 1).FirstOrDefault()?.full_name



                </a>
                <div class="btn-group p-r" role="group" aria-label="Basic radio toggle button group">
                    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked @onchange='@(() => { viewContacts = false; contactClass="contact"; clientClass="client client--active";})'>
                    <label class="@clientClass" for="btnradio1">Клиент</label>

                    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" @onchange='@(() => { viewContacts = true; contactClass="contact contact--active"; clientClass="client";})'>
                    <label class="@contactClass" for="btnradio2">Контактные лица</label>
                    @* <input name="@index" type="radio" checked="@(parcel.Item as Entity_Spatial)" @onchange='@(() => { parcel.Item = new Entity_Spatial(); })' />Одноконтурный ЗУ*@
                </div>
            </div>
        @if (viewContacts == false)
        {
            <div class="section-field">
                <div class="ind-col-lg-5 input-field">
                    <div class="input-label">Имя</div>
                    <input type="text" class="main-input" value="@order?.main_contact?.name" @oninput="@((ChangeEventArgs e) => {order.main_contact.name = e.Value.ToString();clientChange = true;})">
                </div>
                <div class="ind-col-lg-5 input-field">
                    <div class="input-label">E-mail</div>
                    <input type="email" class="main-input" value="@order?.main_contact?.email" @oninput="@((ChangeEventArgs e) => {order.main_contact.email = e.Value.ToString();clientChange = true;})">
                </div>
            </div>
            <div class="section-field">
                <div class="ind-col-lg-5 input-field">
                    <div class="input-label">Фамилия</div>
                    <input type="text" class="main-input" value="@order?.main_contact?.surname" @oninput="@((ChangeEventArgs e) => {order.main_contact.surname = e.Value.ToString();clientChange = true;})">
                </div>
                <div class="ind-col-lg-5 input-field">
                    <div class="input-label">Номер телефона</div>
                    <input type="tel" class="main-input" value="@order?.main_contact?.phone" @oninput="@((ChangeEventArgs e) => {order.main_contact.phone = e.Value.ToString();clientChange = true;})">
                </div>
            </div>
            <div class="section-field">
                <div class="ind-col-lg-5 input-field">
                    <div class="input-label">Отчество</div>
                    <input type="text" class="main-input" value="@order?.main_contact?.patronymic" @oninput="@((ChangeEventArgs e) => {order.main_contact.patronymic = e.Value.ToString();clientChange = true;})">
                </div>
            </div>
            @if (order?.main_contact?.contact_phones != null)
            {
                @foreach (var p in order?.main_contact?.contact_phones)
                {
                    <div class="section-field">
                        <div class="ind-col-lg-5 input-field">
                            <div class="input-label">Доп. телефон</div>
                            <input type="tel" class="main-input" value="@p.phone" @oninput="@((ChangeEventArgs e) => {p.phone = e.Value.ToString();clientChange = true;})">
                        </div>
                    </div>
                }
            }
        }
        else
        {
            <br />
            <div class="section-field ind-col-lg-10">
                <table class="order-table ind-col-lg-10">
                    <thead class="table-success ind-col-lg-10">
                        <tr class="order-row ind-col-lg-10">
                            <td class="ind-col-lg-1">ID</td>
                            <td class="ind-col-lg-3">Имя</td>
                            <td class="ind-col-lg-6">Основной контакт</td>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var _contact in client.contacts)
                        {
                            <tr class="order-row ind-col-lg-10">
                                <td class="ind-col-lg-1">@_contact.id</td>
                                <td class="ind-col-lg-3">@_contact.name</td>
                                <td class="ind-col-lg-6">
                                    <input class="form-check-input" type="radio" @onchange="()=>ChangeMainContact(_contact)" name="maincontact" checked="@GetIsMain(_contact.id)">
                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
        }
    </div>
        @if (client?.client_type == 1)
        {
            <div class="main-section">
                <div class="main-section-label">Данные юридического лица</div>
                <div class="section-field">
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">Полное наименование</div>
                        <input type="text" class="main-input" @bind="client.org_name">
                    </div>
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">ИНН</div>
                        <input type="text" class="main-input" @bind="client.org_inn">
                    </div>
                </div>
                <div class="section-field">
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">Адрес регистрации</div>
                        <input type="text" class="main-input" @bind="client.org_address">
                    </div>
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">ОГРН</div>
                        <input type="text" class="main-input" @bind="client.org_ogrn">
                    </div>
                </div>
            </div>

            <div class="main-section">
                <div class="main-section-label">Банковские реквизиты</div>
                <div class="section-field">
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">БИК</div>
                        <input type="text" class="main-input" @bind="client.bank_bik">
                    </div>
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">Корреспондентский счет</div>
                        <input type="text" class="main-input" @bind="client.bank_cor_schet">
                    </div>
                </div>
                <div class="section-field">
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">Наименование банка</div>
                        <input type="text" class="main-input" @bind="client.bank_name">
                    </div>
                    <div class="ind-col-lg-5 input-field">
                        <div class="input-label">Расчетный счет</div>
                        <input type="text" class="main-input" @bind="client.bank_ras_schet">
                    </div>
                </div>
            </div>
        }
        <div class="main-section">
            <div class="main-section-label">Состав заказа</div>
            <div class="section-field">
                <table class="order-table ind-col-lg-10">
                    <thead class="table-success ind-col-lg-10">
                        <tr class="order-row ind-col-lg-10">
                            <td class="ind-col-lg-1">ID продукта</td>
                            <td class="ind-col-lg-3">Наименование</td>
                            <td class="ind-col-lg-2">Срок доставки</td>
                            <td class="ind-col-lg-1">Цена</td>
                            <td class="ind-col-lg-1">Количество</td>
                            <td class="ind-col-lg-1">Скидка</td>
                            <td class="ind-col-lg-1">Стоимость</td>
                        </tr>
                    </thead>
                    <tbody class="ind-col-lg-10">
                        @if (order != null && order.product_To_Orders != null)
                        {
                            @foreach (var p in order!.product_To_Orders.OrderBy(p => p.product_postition))
                            {
                                <tr class="order-row" draggable="true" ondragover="event.preventDefault();" @ondrop="()=>OnDrop(p)" @ondragstart="()=>OnDragStart(p)">
                                    <td class="ind-col-lg-1" id="model">
                                        <img src="./icons/drag.png" alt="" class="drag">
                                        @p?.product?.id
                                    </td>
                                    <td class="ind-col-lg-3">
                                        <a href="" class="table-link">
                                            @p?.product?.name
                                            <div class="table-link-modal">
                                                <div class="ind-col-lg-2">
                                                    <img src="./images/table-modal-img.png" alt="" class="table-modal-img">
                                                </div>
                                                <div class="ind-col-lg-8">
                                                    <div class="table-modal-title">
                                                        @p?.product?.name
                                                    </div>
                                                    <div class="table-modal-price">
                                                        @p._product_price
                                                    </div>
                                                </div>
                                            </div>
                                        </a>
                                    </td>
                                    <td class="ind-col-lg-2">
                                        <div class="ind-col-lg-3">
                                            <input type="number" class="table-input">
                                        </div>
                                        <div class="ind-col-lg-7">
                                            <select name="" id="" class="table-input">
                                                @foreach (var delivery_period_type in delivery_Period_Types!)
                                                {
                                                    <option value="@delivery_period_type.id">@delivery_period_type.name</option>
                                                }
                                            </select>
                                        </div>
                                    </td>
                                    <td class="ind-col-lg-1"><input type="number" class="main-input" step="0.1" @bind="@p._product_price" /></td>
                                    <td class="ind-col-lg-1"><input type="number" class="main-input" @bind="@p._count" /></td>
                                    <td class="ind-col-lg-1">@p?.discount_total_price</td>
                                    <td class="ind-col-lg-1">
                                        @PriceWithDiscount(p)
                                        <button type="button" class="delete-button" @onclick="(async () => await RemoveProductToOrder(p!))">
                                            <img src="./icons/delete-icon.svg" class="delete-button">
                                        </button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            </div>
            <div class="section-field ind-col-lg-10">
                
                @if (order.product_To_Orders == null || order.product_To_Orders.Count == 0)
                {
                    <p align="center">Товары в заказе отсутствуют</p>
                }
                else
                {
                    <div class="col-12">
                        <label>Разовая скидка</label>
                    </div>
                    <div class="col-1">
                        <input class="form-control" id="ex1" type="number" @bind="@order._ruble_discount">₽
                </div>
                    <div class="col-1">
                        <input class="form-control" id="ex2" type="number" @bind="@order._percent_discount">%
                    </div>

                }
            
                <div class="ind-col-lg-10">
                    <div class="ind-col-lg-10 row-f">
                        <div class="ind-col-lg-7"></div>
                        <div class="ind-col-lg-3 row-f">
                            <div class="ind-col-lg-7" style="text-align: right;">
                                Стоимость товаров:
                            </div>
                            <div class="ind-col-lg-3" style="text-align: right;">
                                @all_product_summ
                            </div>
                        </div>
                    </div>
                    <div class="ind-col-lg-10 row-f">
                        <div class="ind-col-lg-7"></div>
                        <div class="ind-col-lg-3 row-f">
                            <div class="ind-col-lg-7" style="text-align: right;">
                                Стоимость доставки:
                            </div>
                            <div class="ind-col-lg-3" style="text-align: right;">
                                @order.delivery.price
                            </div>
                        </div>
                    </div>
                    <div class="ind-col-lg-10 row-f">
                        <div class="ind-col-lg-7"></div>
                        <div class="ind-col-lg-3 row-f">
                            <div class="ind-col-lg-7" style="text-align: right;">
                                Итог:
                            </div>
                            <div class="ind-col-lg-3" style="text-align: right;">
                                @(order.delivery.price + all_product_summ)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-f">
                <div class="main-section ind-col-lg-5">
                    <div class="main-section-label">Отгрузка и доставка</div>
                    <div class="section-field">
                        <div class="ind-col-lg-10">
                            <div class="ind-col-lg-10 input-field">
                                <div class="input-label">Тип доставки</div>
                                <select type="text" class="main-input" value="@order.delivery?.delivery_type?.id" @onchange="ChangeDeliveryType">
                                    @foreach (var delivery_type in delivery_Types!)
                                    {
                                        <option value="@delivery_type.id">@delivery_type.name</option>
                                    }
                                </select>
                            </div>
                            <div class="ind-col-lg-10 input-field">
                                <div class="input-label">Зафиксированная дата отгрузки на момент оплаты</div>
                                <input type="date" class="main-input" @bind="@order.delivery.shipment_date">
                            </div>
                            <div class="ind-col-lg-10 input-field">
                                <div class="input-label">Стоимость</div>
                                <input type="number" class="main-input" @bind-value="delivery_price">
                            </div>
                            <div class="ind-col-lg-10 input-field">
                                <div class="input-label">ФИО Получателя</div>
                                <input type="text" class="main-input" @bind="@order.delivery.recipient_name">
                            </div>
                            <div class="ind-col-lg-10 input-field">
                                <div class="input-label">Телефон Получателя</div>
                                <input type="tel" class="main-input" @bind="@order.delivery.recipient_phone">
                            </div>
                            <div class="ind-col-lg-10 input-field">
                                <div class="input-label">Адрес получателя</div>
                                <textarea type="text" class="main-input" @bind="@order.delivery.address" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="ind-col-lg-5 background-for-comment">
                    <div class="main-section ind-col-lg-10">
                        <div class="main-section-label">Комментарии к заказу</div>
                        <div class="section-field">
                            <div class="ind-col-lg-10 flex">
                                <textarea type="text" class="main-input" @bind="order.comments"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="main-section ind-col-lg-5">
                <div class="main-section-label">Оплата</div>
                <div class="section-field">
                    <buton type="button" class="add-payment" @onclick="AddNewOrderPay">Добавить оплату</buton>
                </div>
                <div class="input-field">
                    <div class="input-label">К оплате:</div>
                    <label>@order._price_summ</label>
                </div>
                <hr class="custom-hr" />

                @foreach (var p in order?.order_Pays!.Where(o => o.isRemove == false))
                {
                    <div class="payment-field ind-col-lg-10">
                        <div class="input-field">
                            <div class="input-label">
                                Статус
                            </div>
                            <select class="main-input" value="@p.pay_status_id" @onchange="(e)=>ChangePayStatus(e, p)">
                                @foreach (var pay_status in pay_Statuses!)
                                {
                                    <option value="@pay_status.id">@pay_status.name</option>
                                }
                            </select>
                        </div>
                        <div class="input-field">
                            <div class="input-label">
                                Дата оплаты
                            </div>
                            <input type="date" class="main-input" @bind="@p.date">
                        </div>
                        <div class="input-field">
                            <div class="input-label">
                                Сумма
                            </div>
                            @if (p.pay_status_id != 2)
                            {
                            <input type="number" step="0.1" class="main-input" @bind-value="@p.price">
                            }
                            else
                            {
                                <label>@p.price</label>
                            }
                        </div>
                        <button type="button" class="remove-payment" @onclick="()=>RemoveOrderPay(p)">Удалить оплату</button>
                    </div>
                }
            </div>
            <div class="bottom-buttons ind-col-lg-10">
                <button type="submit" class="save">Сохранить</button>
                <button class="close" @onclick="Cancel">Закрыть</button>
                @if (order?.order_status_id == 1)
                {
                    <button class="score">Выставить счет</button>
                }
            </div>
</EditForm>


@code {
    //Изменение классов контакта и клиента
    protected string clientClass = "client client--active";
    protected string contactClass = "contact";
    [Parameter]
    public int clientId { get; set; }

    [Parameter]
    public int orderId { get; set; }
    protected string Title = "Новый заказ";

    protected order? order = new();
    protected List<user>? managers = new();
    protected List<product_to_order> RemoveProductToOrdersList = new();
    protected client? client = new();
    protected List<delivery_type>? delivery_Types = new();
    protected List<pay_status>? pay_Statuses = new();
    protected List<delivery_period_type> delivery_Period_Types = new();

    protected bool OpenProductAddModel = false;
    protected bool clientChange = false;
    protected bool viewContacts = false;
    protected double? delivery_price
    {
        get => order.delivery.price; set
        {
            order.delivery.price = value;
            // UpdatePriceSumm();
        }
    }
    protected double? all_product_summ
    {
        get
        {
            if (order?.product_To_Orders != null && order?.product_To_Orders.Count != 0)
            {
                return order?.product_To_Orders.Select(p => p.total_price).Sum();
            }
            return 0;
        }
    }


    //Методы Drag&Drop
    protected product_to_order drag_product_to_order { get; set; }

    protected void OnDragStart(product_to_order _product_to_order)
    {
        drag_product_to_order = _product_to_order;
    }
    protected void OnDrop(product_to_order _product_to_order)
    {
        int? position = _product_to_order.product_postition;
        _product_to_order.product_postition = drag_product_to_order.product_postition;
        drag_product_to_order.product_postition = position;
        drag_product_to_order = null;
    }

    //Методы инициализвции
    protected override async Task OnInitializedAsync()
    {
        await GetClientsManagers();
    }
    protected async Task GetClientsManagers()
    {
        if (clientId != 0)
        {
            client = await Http.GetFromJsonAsync<client>($"api/Client/{clientId}");
            if (orderId == 0)
            {
                order.user_id = client.user_id;
            }
        }

        managers = await Http.GetFromJsonAsync<List<user>>("api/User?trigger=managers");
        if (orderId == 0 && clientId == 0)
        {
            order.user_id = managers[0].id;
        }

        delivery_Types = await Http.GetFromJsonAsync<List<delivery_type>>("api/DeliveryType");
        pay_Statuses = await Http.GetFromJsonAsync<List<pay_status>>("api/PayStatus");
        delivery_Period_Types = await Http.GetFromJsonAsync<List<delivery_period_type>>("api/DeliveryPeriodType");
    }
    protected override async Task OnParametersSetAsync()
    {
        if (orderId != 0)
        {
            Title = $"Изменить заказ {orderId}";
            order = await Http.GetFromJsonAsync<order>("api/Order/" + orderId);
            client = order.client;
        }
        else
        {
            SetMainContact();
        }
    }

    //Методы для определения main contact
    protected void ChangeMainContact(contact _main_contact)
    {
        order.main_contact = _main_contact;
        order.main_contact_id = _main_contact.id;
        clientChange = true;
    }
    protected bool GetIsMain(int id)
    {
        if (order.main_contact_id == id)
            return true;
        return false;
    }
    protected async Task SetMainContact()
    {
        if (clientId != 0)
        {
            order.main_contact = client.contacts.Where(c => c.main_contact == 1).FirstOrDefault();
            order.main_contact_id = order.main_contact.id;
        }
    }

    //Методы сохранения заказа
    public async Task Bill()
    {
        order.order_status_id = 3; //Потом поменять на 2
        if (order.id != 0)
        {
            await Http.PutAsJsonAsync("api/Order/bill", order);
        }
        Cancel();
    }
    protected async Task SaveOrder()
    {

        if (order?.id != 0)
        {
            await Http.PutAsJsonAsync("api/Order", order);
        }
        else
        {
            order.order_status_id = 1;
            order.client_id = clientId;
            var response = await Http.PostAsJsonAsync("api/Order", order);
            orderId = await response.Content.ReadFromJsonAsync<int>();

        }

        //Сохранение и удаление продуктов из заказа
        if (RemoveProductToOrdersList.Count != 0)
            await Http.PostAsJsonAsync("api/ProductToOrder/remove_products_to_orders", RemoveProductToOrdersList);
        if (order.product_To_Orders != null)
        {
            List<product_to_order> AddProductsToOrderList = order.product_To_Orders?.Where(p => p.id == 0).ToList();
            if (AddProductsToOrderList.Count != 0)
            {
                foreach (var p in order.product_To_Orders)
                    p.order_id = orderId;
                await Http.PostAsJsonAsync("api/ProductToOrder/add_products_to_order", AddProductsToOrderList);
            }
            await Http.PutAsJsonAsync("api/ProductToOrder/update_products_to_order", order.product_To_Orders.Where(p => p.id != 0));
        }

        //Изменение данных клиентов
        if (clientChange)
        {
            //Добавить создание нового клиента

            //await Http.PutAsJsonAsync("api/Client", client);
            //await Http.PutAsJsonAsync("api/Contact", order.main_contact);

        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/fetchorderdetails");
    }



    //Методы для работы с товарами в заказе
    protected double? PriceWithDiscount(product_to_order product_to_order)
    {
        double? price = product_to_order?.total_price - product_to_order?.discount_total_price;
        if (price == null || price < 0)
            return 0;
        return price;
    }
    protected void CloseAddProductModal()
    {
        OpenProductAddModel = false;
        StateHasChanged();
    }
    protected void AddProductToProductToOrder(product_to_order product_To_Order)
    {
        if (order?.product_To_Orders == null)
            order.product_To_Orders = new List<product_to_order>();
        if (order._percent_discount != null)
            product_To_Order.discount_total_price += product_To_Order.total_price / 100 * order._percent_discount;
        if (order._ruble_discount != null)
            product_To_Order.discount_total_price += order._ruble_discount;


        order.product_To_Orders.Add(product_To_Order);
        int? last_position = order.product_To_Orders.OrderByDescending(p => p.product_postition)?.FirstOrDefault()?.product_postition;
        product_To_Order.product_postition = last_position + 1;
        StateHasChanged();
    }
    protected async Task RemoveProductToOrder(product_to_order product_to_order)
    {
        //await Http.DeleteAsync("api/ProductToOrder/" + product_to_order.id);
        if (product_to_order?.id != null && product_to_order?.id != 0)
            RemoveProductToOrdersList.Add(product_to_order);
        order?.product_To_Orders?.Remove(product_to_order);
        //Уменьшение позиций всех товаров идущих за удаляемым
        foreach (var product in order?.product_To_Orders?.Where(p => p.product_postition > product_to_order.product_postition))
        {
            product.product_postition -= 1;
        }
    }

    //Методы для доставки
    protected void ChangeDeliveryType(ChangeEventArgs e)
    {
        var delivery_type = delivery_Types.Where(d => d.id == Convert.ToInt32(e.Value)).FirstOrDefault();
        order.delivery.delivery_type = delivery_type;
        order.delivery.price = delivery_type.price;
        order.delivery.delivery_type_id = delivery_type.id;
    }

    //Методы для работы с оплатой заказа
    protected void ChangePayStatus(ChangeEventArgs e, order_pay order_Pay)
    {
        int pay_status = Convert.ToInt32(e.Value);
        if (pay_status == 2)
            order._price_summ -= order_Pay.price;


        order_Pay.pay_status_id = pay_status;
    }
    protected void AddNewOrderPay()
    {
        order_pay order_Pay = new order_pay();
        order_Pay.price = order._price_summ;
        order_Pay.pay_status_id = 1;
        order.order_Pays.Add(order_Pay);
    }
    protected void RemoveOrderPay(order_pay order_Pay)
    {
        order_Pay.isRemove = true;
    }

}