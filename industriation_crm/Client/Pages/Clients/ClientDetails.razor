@page "/fetchclientdetails"
@using Newtonsoft.Json
@using System.Security.Claims
@using industriation_crm.Shared.FilterModels
@using industriation_crm.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<link rel="stylesheet" href="bootstrap 2.0.css" />

<div class="main-title">Клиенты</div>
<hr />
@if (clientList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (viewAddClient)
    {
        <AddClient returnToFetchUsers="ReturnToFetchClient"></AddClient>
    }
    else
    {
        <div class="section-field">
            <a class="score" type="button" @onclick="()=>viewAddClient=true">
                Добавить клиента
            </a>
        </div>
        <div class="main-section">
            <div class="ind-col-lg-5 ind-col-md-7 input-field">
                <div class="input-label ind-col-lg-5">
                    ФИО клиента:
                </div>
                <input type="text" class="main-input ind-col-lg-5 ind-col-md-7" @bind="clientFilter.client">
            </div>
            <div class="ind-col-lg-5 ind-col-md-7 input-field">
                <div class="input-label ind-col-lg-5">
                    ИНН:
                </div>
                <input type="number" class="main-input ind-col-lg-5 ind-col-md-7" @bind="clientFilter.inn">
            </div>
            <button @onclick="Search" class="score mt-20 mb-20">Поиск</button>

            <div class="section-field">
                <table class="order-table ind-col-lg-10">
                    <thead class="ind-col-lg-10">
                        <tr class="order-row ind-col-lg-10">
                            <td class="ind-col-lg-1">ID</td>
                            <td class="ind-col-lg-3">Организация</td>
                            <td class="ind-col-lg-2">ФИО</td>
                            <td class="ind-col-lg-2">Тип клиента</td>
                            <td class="ind-col-lg-2">Закрепленный менеджер</td>
                            @*                            <td class="ind-col-lg-1">Действия</td>*@
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var _client in clientList)
                        {
                            <tr class="order-row ind-col-lg-10">
                                <td class="ind-col-lg-1">
                                    @if (CallType == 0 && contact_number == null)
                                    {
                                        <a href='/client/edit/@_client.id'>
                                            @_client.id
                                        </a>
                                    }
                                    @if (CallType == 1)
                                    {
                                        <button type="button" class="btn btn-link" @onclick="()=>SelectClient(_client)">@_client.id</button>
                                    }
                                    @if (contact_number != null)
                                    {
                                        <a href='/contact/add/@_client.id/@contact_number'>
                                            @_client.id
                                        </a>

                                    }
                                </td>
                                <td class="ind-col-lg-3">@_client.org_name</td>
                                <td class="ind-col-lg-2">@_client.contacts.Where(c=>c.main_contact==1).FirstOrDefault()?.full_name</td>
                                <td class="ind-col-lg-2">
                                    @if (_client.client_type == 0)
                                    {
                                        <i>Физическое лицо</i>
                                    }
                                    else if (_client.client_type == 1)
                                    {
                                        <i>Юридическое лицо</i>
                                    }
                                </td>
                                <td class="ind-col-lg-2">@_client.user?.name</td>
                                @* <td class="ind-col-lg-1">
                    @if (SelectOrderClient == null)
                    {
                    <div class="ind-col-lg-10">
                    <a class="score" type="button" href='/client/edit/@_client.id'>
                    <div class="hidden-md">Изменить</div>
                    <div class="hidden-lg ind-col-md-10">
                    <img src="./icons/edit.svg" class="h20-w20">
                    </div>
                    </a>
                    </div>
                    }
                    else
                    {
                    <div class="ind-col-lg-10">
                    <button class="score" type="button" @onclick="()=>SelectOrderClient(_client)">
                    Выбрать
                    </button>
                    </div>
                    }
                    </td>*@
                            </tr>
                        }
                    </tbody>

                </table>
            </div>
            <div class="section-field filter-pagination mt-20">
                <div class="ind-col-lg-6">
                    Страница:
                    <input class="pagination-input" type="number" min="1" @bind="current_page" @bind:event="oninput" @onkeydown="OnKeyDown">
                    из @page_count.Count()
                    <button class="score" @onclick="GetClient">Перейти</button>
                </div>
                <div class="ind-col-lg-4">
                    <button class="score" @onclick="PagPrev">Предыдущая</button>
                    <button class="score" @onclick="PagNext">Следующая</button>
                </div>
            </div>
        </div>
    }

}
@code {
    [Parameter]
    public EventCallback<client> SelectOrderClient { get; set; }
    [Parameter]
    public int CallType { get; set; } = 0;
    [Parameter]
    public string? contact_number { get; set; }
    protected bool viewAddClient = false;
    protected int count_on_page = 50;
    protected int current_page = 1;
    List<int> page_count = new List<int>();
    protected ClientFilter clientFilter = new();
    protected ClientReturnData clientReturnData = new();

    protected List<client> clientList = new();
    protected int role { get; set; }
    protected async Task SelectClient(client client)
    {
            await SelectOrderClient.InvokeAsync(client);
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        role = Convert.ToInt32(authState.User.FindFirst(ClaimTypes.Role).Value);
        await GetClient();
    }
    protected async Task Search()
    {
        current_page = 1;
        await GetClient();
    }
    protected async Task OnKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            await GetClient();
        }
    }
    protected async Task PagPrev()
    {
        if (current_page > 1)
        {
            current_page--;
            await GetClient();
        }
    }
    protected async Task PagNext()
    {
        if (current_page < page_count.Count)
        {
            current_page++;
            await GetClient();
        }
    }
    protected async Task GetClient()
    {
        clientFilter.current_page = current_page;
        if (page_count.Count != 0 && (current_page < 1 || current_page > page_count.Count))
            return;
        clientFilter.client_on_page = count_on_page;
        clientFilter.role = role;

        var response = await Http.PostAsJsonAsync("api/Client/GetClients", clientFilter);
        string responseBody = await response.Content.ReadAsStringAsync();
        clientReturnData = JsonConvert.DeserializeObject<ClientReturnData>(responseBody);

        clientList = clientReturnData.clients;
        int total_page = Convert.ToInt32(Math.Ceiling(clientReturnData.count / Convert.ToDouble(count_on_page)));
        page_count = new();
        for (int i = 1; i <= total_page; i++)
            page_count.Add(i);


    }
    protected async Task RemoveClient(client client)
    {
        await Http.DeleteAsync("api/Client/" + client.id);
        clientList.Remove(client);
    }
    protected async void ReturnToFetchClient(client client)
    {
        viewAddClient = false;
        if (client != null)
            await GetClient();
        StateHasChanged();

    }
}