@page "/fetchproductdetails"
@using System.Text
@using industriation_crm.Shared.Models
@using industriation_crm.Shared.FilterModels
@using Newtonsoft.Json
@inject HttpClient Http
<link rel="stylesheet" href="bootstrap 2.0.css" />

<div class="main-title">Продукты</div>

<hr />
@if (productList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="main-section">
        <div class="main-section-label">
            Фильтр
        </div>
        <div class="row-f mt-10">
            @if (currentCategory != null && currentCategory.id != 0)
            {
                List<category> categoryTree = GetCategoryTree(new List<category>(), currentCategory);
                categoryTree.Reverse();
                foreach (var category in categoryTree)
                {
                    <button type="button" class="filter-button selected" @onclick="()=>GetProducts(category)">@category.name <img class="arrow" src="./icons/arrow-right.svg" /></button>
                }
                @foreach (var category in categoriesList.Where(c => c.parent_id == currentCategory.id))
                {
                    <button class="filter-button" @onclick="()=>GetProducts(category)">@category.name</button>
                }
            }
        </div>
        <hr />
        <div class="section-field mb-20">
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Наименование товара:
                </div>
                <input type="text" class="main-input" @bind="productFilter.name" />
            </div>
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Артикул:
                </div>
                <input class="main-input" @bind="productFilter.article" />
            </div>
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Цена от:
                </div>
                <input type="number" class="main-input" @bind="productFilter.price_from" />
            </div>
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Цена до:
                </div>
                <input type="number" class="main-input" @bind="productFilter.price_to" />
            </div>
        </div>
        <div class="section-field pad-0-5">
            <button class="score mr-20" @onclick="FilterButtonClick">Поиск</button>
            <button class="close" @onclick="CleanFilter">Очистить фильтр</button>
        </div>
    </div>





    <div class="main-section">
        <div class="section-field">

            <table class="order-table ind-col-lg-10">
                <thead class="ind-col-lg-10">
                    <tr class="order-row ind-col-lg-10">
                        <td class="ind-col-lg-1">Артикул</td>
                        <td class="ind-col-lg-1">Производитель</td>
                        <td class="ind-col-lg-5">Наименование</td>
                        <td class="ind-col-lg-1">Количество</td>
                        <td class="ind-col-lg-1">Цена</td>
                        <td class="ind-col-lg-1">Действия</td>
                    </tr>
                </thead>
                <tbody class="ind-col-lg-10">
                    @foreach (var product in productList)
                    {
                        <tr class="order-row ind-col-lg-10">
                            <td class="ind-col-lg-1">@product.article</td>
                            <td class="ind-col-lg-1">Pneumax</td>
                            <td class="ind-col-lg-5">@product.name</td>
                            <td class="ind-col-lg-1">100</td>
                            <td class="ind-col-lg-1">@product.price</td>
                            <td class="ind-col-lg-1">
                                <a href='/product/edit/@product.id' class="score" role="button">
                                    <div class="hidden-md">Изменить</div>
                                    <div class="hidden-lg ind-col-md-10">
                                        <img src="./icons/edit.svg" class="h20-w20">
                                    </div>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
        <div class="section-field filter-pagination mt-20">
            <div class="ind-col-lg-6">
                Страница:
                <input class="pagination-input" type="number" min="1" @bind="current_page" @bind:event="oninput" @onkeydown="OnKeyDown">
                из @page_count.Count()
                <button class="score" @onclick="FindByFilter">Перейти</button>
            </div>
            <div class="ind-col-lg-4">
                <button class="score" @onclick="PagPrev">Предыдущая</button>
                <button class="score" @onclick="PagNext">Следующая</button>
            </div>
        </div>
    </div>
}
@code {
    protected int count_on_page = 50;
    protected int current_page = 1;

    List<int> page_count = new List<int>();
    protected ProductFilter productFilter = new();

    protected category? currentCategory = new();
    protected List<category>? categoriesList = new();
    protected List<product>? productList = new();
    protected product product = new();

    protected async Task OnKeyDown(KeyboardEventArgs e)
    {

        if (e.Key == "Enter")
        {
            await FindByFilter();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        categoriesList = await Http.GetFromJsonAsync<List<category>>("api/Category");
        currentCategory = categoriesList.Where(c => c.parent_id == 0).FirstOrDefault();
        await FindByFilter();
    }
    protected async Task GetProducts(category category)
    {
        currentCategory = category;
        productFilter.child_categories = new();
        GetChildCategories(currentCategory.id);
        current_page = 1;
        await FindByFilter();
    }

    protected async Task PagPrev()
    {
        if (current_page > 1)
        {
            current_page--;
            await FindByFilter();
        }
    }
    protected async Task PagNext()
    {
        if (current_page < page_count.Count)
        {
            current_page++;
            await FindByFilter();
        }
    }
    protected async Task FilterButtonClick()
    {
        current_page = 1;
        await FindByFilter();
    }
    protected async Task FindByFilter()
    {
        productFilter.current_page = current_page;
        if (page_count.Count != 0 && (current_page < 1 || current_page > page_count.Count))
            return;
        productFilter.product_on_page = count_on_page;
        productFilter.category_id = currentCategory.id;

        if (productFilter.price_to == null)
            productFilter.price_to = 10000000;
        if (productFilter.price_from == null)
            productFilter.price_from = 0;

        var response = await Http.PostAsJsonAsync("api/Product/FindByFilter", productFilter);
        var responseBody = await response.Content.ReadAsStringAsync();
        ProductReturnData? productReturnData = JsonConvert.DeserializeObject<ProductReturnData>(responseBody);
        productList = productReturnData?.products;

        int total_page = Convert.ToInt32(Math.Ceiling(productReturnData!.count / Convert.ToDouble(count_on_page)));
        
        page_count = new();
        for (int i = 1; i <= total_page; i++)
            page_count.Add(i);
        StateHasChanged();
    }
    protected List<category> GetCategoryTree(List<category> categoryTree, category category)
    {
        categoryTree.Add(category);
        if (category.parent_id != 0)
            GetCategoryTree(categoryTree, categoriesList.Where(c => c.id == category.parent_id).FirstOrDefault());
        return categoryTree;
    }
    protected async Task CleanFilter()
    {
        productFilter = new();
        currentCategory = categoriesList.Where(c => c.id == 1).FirstOrDefault();
        current_page = 1;
        await FindByFilter();
    }
    protected void GetChildCategories(int category_id)
    {
        productFilter.child_categories.Add(category_id);
        List<category> childs = categoriesList?.Where(c => c.parent_id == category_id).ToList();
        if (childs == null || childs.Count == 0)
            return;
        foreach (var c in childs)
        {
            GetChildCategories(c.id);
        }
    }

}