@page "/fetchproductdetails"
@using System.Text
@using industriation_crm.Shared.Models
@using industriation_crm.Shared.FilterModels
@using Newtonsoft.Json
@inject HttpClient Http
<link rel="stylesheet" href="bootstrap 2.0.css" />

<div class="main-title">Продукты</div>

<hr />
@if (productList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="main-section">
        <div class="main-section-label">
            Фильтр
        </div>
        <div class="row-f mt-10">
            @*<button type="button" class="btn btn-primary btn-lg" @onclick="CategoryBack">&#9664;</button>&nbsp;*@
            @if (currentCategory != null && currentCategory.id != 0)
            {
                List<category> categoryTree = GetCategoryTree(new List<category>(), currentCategory);
                categoryTree.Reverse();
                foreach (var category in categoryTree)
                {
                    <button type="button" class="filter-button selected" @onclick="()=>GetProducts(category)">@category.name <img class="arrow" src="./icons/arrow-right.svg" /></button>
                }
                @foreach (var category in categoriesList.Where(c => c.parent_id == currentCategory.id))
                {
                    <button class="filter-button" @onclick="()=>GetProducts(category)">@category.name</button>
                }
            }
        </div>
        <hr/>
        <div class="section-field mb-20">
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Наименование товара:
                </div>
                <input class="main-input" @bind="productFilter.name" />
            </div>
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Артикул:
                </div>
                <input class="main-input" @bind="productFilter.article" />
            </div>
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Цена от:
                </div>
                <input class="main-input" @bind="productFilter.price_from" />
            </div>
            <div class="ind-col-lg-2-5 pad-0-10-0-0">
                <div class="input-label">
                    Цена до:
                </div>
                <input class="main-input" @bind="productFilter.price_to" />
            </div>
        </div>
        <div class="section-field pad-0-5">
            <button class="score mr-20" @onclick="FindByFilter">Поиск</button>
            <button class="close" @onclick="CleanFilter">Очистить фильтр</button>
        </div>
    </div>





    <div class="main-section">
        <div class="section-field">

            <table class="order-table ind-col-lg-10">
                <thead class="ind-col-lg-10">
                    <tr class="order-row ind-col-lg-10">
                        <td class="ind-col-lg-1">Артикул</td>
                        <td class="ind-col-lg-7">Наименование</td>
                        <td class="ind-col-lg-2">Действия</td>
                    </tr>
                </thead>
                <tbody class="ind-col-lg-10">
                    @foreach (var product in productList)
                    {
                        <tr class="order-row ind-col-lg-10">
                            <td class="ind-col-lg-1">@product.article</td>
                            <td class="ind-col-lg-7">@product.name</td>
                            <td class="ind-col-lg-2">
                                <a href='/product/edit/@product.id' class="score" role="button">
                                    Изменить
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>

            </table>
        </div>
        Страница:
        <select @onchange="(e)=>ChangePage(e)">
            @foreach (int i in page_count!)
            {
                <option>@i</option>
            }
        </select>
    </div>
}
@code {
    protected int count_on_page = 50;
    protected int current_page = 1;
    public int total_page;

    public int skip = 0;
    List<int> page_count = new List<int>();
    protected ProductFilter productFilter = new();

    protected category currentCategory = new();
    protected List<category> categoriesList = new();
    protected List<product> productList = new();
    protected product product = new();

    protected async Task ChangePage(ChangeEventArgs e)
    {
        current_page = Convert.ToInt32(e.Value);
        await FindByFilter();
    }
    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }
    protected async Task GetData()
    {
        categoriesList = await Http.GetFromJsonAsync<List<category>>("api/Category");

        currentCategory = categoriesList.Where(c => c.parent_id == 0).FirstOrDefault();
        await FindByFilter();
    }
    protected async Task GetProducts(category category)
    {
        currentCategory = category;
        productList = await Http.GetFromJsonAsync<List<product>>("api/Product/GetProductDetails/" + category.id);
        total_page = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(productList.Count) / Convert.ToDouble(count_on_page)));
    }

    protected void CategoryBack()
    {
        if (currentCategory.parent_id != 0)
            currentCategory = categoriesList.Where(c => c.id == currentCategory.parent_id).FirstOrDefault();
    }
    protected async Task FindByFilter()
    {
        productFilter.current_page = current_page;
        productFilter.product_on_page = count_on_page;
        productFilter.category_id = currentCategory.id;

        if (productFilter.price_to == null)
            productFilter.price_to = 10000000;
        var json = JsonConvert.SerializeObject(productFilter);
        var stringContent = new StringContent(json);
        var response = await Http.PostAsJsonAsync("api/Product/FindByFilter", productFilter);
        var responseBody = await response.Content.ReadAsStringAsync();
        ProductReturnData productReturnData = JsonConvert.DeserializeObject<ProductReturnData>(responseBody);
        productList = productReturnData.products;

        total_page = Convert.ToInt32(Math.Ceiling(productReturnData.count / Convert.ToDouble(count_on_page)));
        page_count = new();
        for (int i = 1; i <= total_page; i++)
            page_count.Add(i);
    }
    protected List<category> GetCategoryTree(List<category> categoryTree, category category)
    {
        categoryTree.Add(category);
        if (category.parent_id != 0)
            GetCategoryTree(categoryTree, categoriesList.Where(c => c.id == category.parent_id).FirstOrDefault());
        return categoryTree;
    }
    protected async Task CleanFilter()
    {
        productFilter = new();
        currentCategory = categoriesList.Where(c => c.id == 1).FirstOrDefault();
        current_page = 1;

    }
}