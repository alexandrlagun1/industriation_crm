@inject ILocalStorageService _localStorageService
@inject AuthenticationStateProvider _authStateProvider
@inject HttpClient Http
@inject HubConnection HubConnection

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="@OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>




@code {
    private async Task OnNavigateAsync(NavigationContext args)
    {
        var auth = await _localStorageService.GetItemAsync<string>("isauthenticated");
        var user = (await (_authStateProvider as CustomAuthStateProvider)
        .GetAuthenticationStateAsync()).User;

        if (!string.IsNullOrEmpty(auth) && !user.Identity.IsAuthenticated)
        {
            var response = await Http.GetAsync("api/Auth/userprofile");
            if (response.IsSuccessStatusCode)
            {
                (_authStateProvider as CustomAuthStateProvider)
                .SetAuthInfo(response.Content.ReadFromJsonAsync<user>().Result);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                await _localStorageService.RemoveItemAsync("isauthenticated");
            }
        }
    }

    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override void OnInitialized()
    {
        ConnectWithRetryAsync(cts.Token);

        HubConnection.Closed += error =>
        {
            return ConnectWithRetryAsync(cts.Token);
        };
    }

    private async Task<bool> ConnectWithRetryAsync(CancellationToken token)
    {
        while (true)
        {
            try
            {
                await HubConnection.StartAsync(token);
                return true;
            }
            catch when (token.IsCancellationRequested)
            {
                return false;
            }
            catch
            {
                // Try again in a few seconds. This could be an incremental interval
                await Task.Delay(5000);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
        await HubConnection.DisposeAsync();
    }
}